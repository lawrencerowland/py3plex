{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMvYE8ftZVxA1b5aUQPKOld",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lawrencerowland/py3plex/blob/master/Working%20through%20the%20easy%20examples\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "collapsed": true,
        "id": "VhKla6DfHVbC"
      },
      "outputs": [],
      "source": [
        "from py3plex.visualization.multilayer import *\n",
        "from py3plex.visualization.colors import all_color_names,colors_default\n",
        "from py3plex.core import multinet"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "multilayer_network = multinet.multi_layer_network().load_network(\"./datasets/ecommerce_0.gml\", directed=True, input_type=\"gml\")"
      ],
      "metadata": {
        "id": "S-55zwu7IzYZ"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "multilayer_network.basic_stats()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pv2U5GIlJzWV",
        "outputId": "75bf898f-2365-443a-b95d-9fb3e38c64ab"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Computing core stats of the network \n",
            " --------------------\n",
            "MultiDiGraph with 367 nodes and 616 edges\n",
            "Number of unique node IDs: 367\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "multilayer_network.visualize_network(style=\"hairball\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 418
        },
        "id": "G2J9tIugLgJn",
        "outputId": "a1056512-d1ab-4435-9683-934c381da1d9"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Network splitting in progress \n",
            " --------------------\n",
            "Beginning parsing..\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:04<00:00, 23.29it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.73  seconds\n",
            "Repulsion forces  took  3.23  seconds\n",
            "Gravitational forces  took  0.04  seconds\n",
            "Attraction forces  took  0.09  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.10  seconds\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "multilayer_network.visualize_network()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "bXAikRq8J7YJ",
        "outputId": "bbe0876a-089c-4d62-a172-4bce33f4aa74"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Network splitting in progress \n",
            " --------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:01<00:00, 81.74it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.18  seconds\n",
            "Repulsion forces  took  0.96  seconds\n",
            "Gravitational forces  took  0.01  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.03  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 169.06it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.09  seconds\n",
            "Repulsion forces  took  0.46  seconds\n",
            "Gravitational forces  took  0.01  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.02  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 10057.56it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 6704.56it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.01  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 49269.40it/s]\n",
            "/usr/local/lib/python3.7/dist-packages/py3plex/core/converters.py:27: RuntimeWarning: invalid value encountered in true_divide\n",
            "  np.min(coordinate_matrix[:, 0]))\n",
            "/usr/local/lib/python3.7/dist-packages/py3plex/core/converters.py:31: RuntimeWarning: invalid value encountered in true_divide\n",
            "  np.min(coordinate_matrix[:, 1]))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n",
            "Finished with layout..\n",
            "MultiDiGraph with 225 nodes and 0 edges\n",
            "MultiDiGraph with 132 nodes and 0 edges\n",
            "MultiDiGraph with 2 nodes and 0 edges\n",
            "MultiDiGraph with 7 nodes and 0 edges\n",
            "MultiDiGraph with 1 nodes and 0 edges\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 2/2 [00:00<00:00,  3.89it/s]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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MplYvfpjli59u1UM2UQiDSvv3FS2bdvGwIED6/19r776KklJSWzcuJGNGzfyj3/8gwMHDjB16lQWLFgAxDowK1asYNKkSac8/mx17NiRGTNmMGvWLLZs2cKIESO45557mDVrFhs3bmTRokVMnz49fvy+fftYuXIl7777Lj/96U+57LLLKCgowGq1nvACdKESQzRN7NixY8yfP5/s7GwURWH79u2oav0uwsmyjNPppHPnzjzyyCP07dsXl+vM26n95z//YcmSJbjdbrxeL+FwGF3XsVgsvPXWW6SmprJw4ULeeOON+BTLLl260LdvX/LzexNfZNPMunXrTk5OGz74YAkuVxKBgMry5QcYMqQNOTnO5m7e90gSLa4H31Aff/wxW7duZeHChQBUV1ezZ88eJkyYwD333EMoFOKjjz5i5MiRWK3WUx5/LsNAy5cvZ8eOHfF/e71efD4fABMmTMBoNNKnTx+i0Sjjx48HoE+fPhQVFTX4PhOFCPgm5PP52LBhA6qqoqoqR48exe121/s8aWlp2Gw2hgwZwt69exk9evQJtweDQZYtW8batWspKipi2rRpfP755yxfvpzdu3fHNwvp378/vXr1wuVy0a9fv/j3BgIBJEnCaDSSnZ1NWloaDoeLP//51XN+DhqL0+niRz/6KQA///kHfPZZMWlpVj7//GfN3LKTi0ZbVsD36tUrHrr1oes6s2fPZty4cd+7bfTo0Sxbtoy33nqL66+//rTHn0vYaprGl19+edKFcGZzbIGYLMsYjcb4O05ZluvdkUpEIuCb0BtvvMGiRYswm8243W5KS0vrfQ5FUcjPzycSieBwOLjhhhvit61bt44lS5bEL9ZarVaMRiN33nknsiwTjUZxOBzxj7vvvpupU6fi8/nYtGkTkUiEUCiEz+ejpqaGSCTCyJEjcTqd+P0hbrllCj169EDTdGRZZuTIy7niignNthCpriia0Rj7bDCIEcazNWbMGB566CFefvll7rjjDgC2bt1KdXX1acfhx40bx5w5cxgzZkx8iDE3Nxe73c7UqVN55ZVX2LRpE6+//vppj68Pp9N5wsK/sWPHMnv2bO69914gtl9BY245mchEwDeRf/7zn6xYsYKkpCQGDx5MQUFBgy765Obmous6OTk5/OpXv8Jmi9XyXrFiBdOmTYsvmOrTpw9PPPEEgwcP5he/+AXZ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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# visualization of a simple heterogeneous network\n",
        "from py3plex.visualization.embedding_visualization import embedding_tools\n",
        "from py3plex.wrappers import train_node2vec_embedding\n",
        "import argparse\n",
        "from collections import Counter\n",
        "from py3plex.visualization.colors import colors_default\n",
        "from py3plex.algorithms.community_detection import community_wrapper as cw\n",
        "from py3plex.visualization.multilayer import draw_multiedges, draw_multilayer_default, hairball_plot, plt\n",
        "from py3plex.core import multinet"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vpca2c0jLtMU",
        "outputId": "2e7634e7-b976-4e8e-e07e-e6cb962adf3b"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "wrappers imported\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# You can also access individual graphical elements separately!\n",
        "\n",
        "network_labels, graphs, multilinks = multilayer_network.get_layers(\n",
        ")  # get layers for visualizat# ion\n",
        "draw_multilayer_default(graphs,\n",
        "                        display=False,\n",
        "                        background_shape=\"circle\",\n",
        "                        labels=network_labels)\n",
        "\n",
        "enum = 1\n",
        "color_mappings = {idx: col for idx, col in enumerate(colors_default)}\n",
        "for edge_type, edges in multilinks.items():\n",
        "\n",
        "    #    network_list,multi_edge_tuple,input_type=\"nodes\",linepoints=\"-.\",alphachannel=0.3,linecolor=\"black\",curve_height=1,style=\"curve2_bezier\",linewidth=1,invert=False,linmod=\"both\",resolution=0.1\n",
        "    print(edge_type)\n",
        "    if edge_type == \"refers_to\":\n",
        "        draw_multiedges(graphs,\n",
        "                        edges,\n",
        "                        alphachannel=0.05,\n",
        "                        linepoints=\"--\",\n",
        "                        linecolor=\"lightblue\",\n",
        "                        curve_height=5,\n",
        "                        linmod=\"upper\",\n",
        "                        linewidth=0.4)\n",
        "    elif edge_type == \"refers_to\":\n",
        "        draw_multiedges(graphs,\n",
        "                        edges,\n",
        "                        alphachannel=0.2,\n",
        "                        linepoints=\":\",\n",
        "                        linecolor=\"green\",\n",
        "                        curve_height=5,\n",
        "                        linmod=\"upper\",\n",
        "                        linewidth=0.3)\n",
        "    elif edge_type == \"belongs_to\":\n",
        "        draw_multiedges(graphs,\n",
        "                        edges,\n",
        "                        alphachannel=0.2,\n",
        "                        linepoints=\":\",\n",
        "                        linecolor=\"red\",\n",
        "                        curve_height=5,\n",
        "                        linmod=\"upper\",\n",
        "                        linewidth=0.4)\n",
        "    elif edge_type == \"codes_for\":\n",
        "        draw_multiedges(graphs,\n",
        "                        edges,\n",
        "                        alphachannel=0.2,\n",
        "                        linepoints=\":\",\n",
        "                        linecolor=\"orange\",\n",
        "                        curve_height=5,\n",
        "                        linmod=\"upper\",\n",
        "                        linewidth=0.4)\n",
        "    else:\n",
        "        draw_multiedges(graphs,\n",
        "                        edges,\n",
        "                        alphachannel=0.2,\n",
        "                        linepoints=\"-.\",\n",
        "                        linecolor=\"black\",\n",
        "                        curve_height=5,\n",
        "                        linmod=\"both\",\n",
        "                        linewidth=0.4)\n",
        "    enum += 1\n",
        "plt.show()\n",
        "plt.clf()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 965
        },
        "id": "_kxda6b9L1OM",
        "outputId": "10877e57-7662-45f3-866e-71c9272838fe"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Network splitting in progress \n",
            " --------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:01<00:00, 82.51it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.17  seconds\n",
            "Repulsion forces  took  0.97  seconds\n",
            "Gravitational forces  took  0.01  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.03  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 164.98it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.09  seconds\n",
            "Repulsion forces  took  0.48  seconds\n",
            "Gravitational forces  took  0.01  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.02  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 19581.25it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 5692.21it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.01  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.01  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 34609.32it/s]\n",
            "/usr/local/lib/python3.7/dist-packages/py3plex/core/converters.py:27: RuntimeWarning: invalid value encountered in true_divide\n",
            "  np.min(coordinate_matrix[:, 0]))\n",
            "/usr/local/lib/python3.7/dist-packages/py3plex/core/converters.py:31: RuntimeWarning: invalid value encountered in true_divide\n",
            "  np.min(coordinate_matrix[:, 1]))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n",
            "Finished with layout..\n",
            "purchased_by\n",
            "purchased\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# entanglement: By. Benjamin Renoust and Blaz Skrlj, 2019\n",
        "# load an example multilayer network\n",
        "\n",
        "from py3plex.core import multinet\n",
        "from py3plex.algorithms.multilayer_algorithms.entanglement import compute_entanglement_analysis\n",
        "\n",
        "# visualization from a simple file\n",
        "\n",
        "analysis = compute_entanglement_analysis(multilayer_network)\n",
        "\n",
        "print(\"%d connected components of layers\" % len(analysis))\n",
        "for i, b in enumerate(analysis):\n",
        "    print('--- block %d' % i)\n",
        "    layer_labels = b['Layer entanglement'].keys()\n",
        "    print('Covering layers: %s' % layer_labels)\n",
        "\n",
        "    print('Entanglement intensity: %f' % b['Entanglement intensity'])\n",
        "    print('Layer entanglement: %s' % b['Layer entanglement'])\n",
        "    print('Entanglement homogeneity: %f' % b['Entanglement homogeneity'])\n",
        "    print('Normalized homogeneity: %f' % b['Normalized homogeneity'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "izGirXiaNpPx",
        "outputId": "069669f2-5c0b-4a3e-d17b-07040168d197"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.7.14 (default, Sep  8 2022, 00:06:44) \n",
            "[GCC 7.5.0]\n",
            "0 connected components of layers\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# A simple example for extracting different layers based on subgraphs.\n",
        "\n",
        "from py3plex.algorithms.statistics.basic_statistics import core_network_statistics\n",
        "\n",
        "names, networks, multiedges = multilayer_network.get_layers()\n",
        "\n",
        "# print some basic statistics of each network\n",
        "for name, network, multiedgelist in zip(names, networks, multiedges):\n",
        "    print(name, core_network_statistics(network))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kvg43IFSOOc0",
        "outputId": "3a98d456-feda-4140-ac20-813b4f4518f0"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Network splitting in progress \n",
            " --------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:01<00:00, 67.98it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.42  seconds\n",
            "Repulsion forces  took  0.97  seconds\n",
            "Gravitational forces  took  0.01  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.03  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 154.56it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.09  seconds\n",
            "Repulsion forces  took  0.51  seconds\n",
            "Gravitational forces  took  0.01  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.02  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 26275.16it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 6973.65it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.01  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 46722.78it/s]\n",
            "/usr/local/lib/python3.7/dist-packages/py3plex/core/converters.py:27: RuntimeWarning: invalid value encountered in true_divide\n",
            "  np.min(coordinate_matrix[:, 0]))\n",
            "/usr/local/lib/python3.7/dist-packages/py3plex/core/converters.py:31: RuntimeWarning: invalid value encountered in true_divide\n",
            "  np.min(coordinate_matrix[:, 1]))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n",
            "Finished with layout..\n",
            "purchase       Name classes nodes edges  degree     diameter connected components  \\\n",
            "0  example    None   225     0     0.0  intractable                 None   \n",
            "\n",
            "  clustering coefficient density  flow_hierarchy flow hierarchy  \n",
            "0                   None       0             NaN    intractable  \n",
            "D_level_item       Name classes nodes edges  degree     diameter connected components  \\\n",
            "0  example    None   132     0     0.0  intractable                 None   \n",
            "\n",
            "  clustering coefficient density  flow_hierarchy flow hierarchy  \n",
            "0                   None       0             NaN    intractable  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " #this example demonstrates how a network can be manipulated\n",
        "\n",
        "\n",
        "# dealing with multiplex networks\n",
        "B = multinet.multi_layer_network(network_type=\"multiplex\")\n",
        "B.add_edges(\n",
        "    [[1, 1, 2, 1, 1], [1, 2, 3, 2, 1], [1, 2, 3, 1, 1], [2, 1, 3, 2, 1]],\n",
        "    input_type=\"list\")\n",
        "\n",
        "# subset the network by layers\n",
        "C = B.subnetwork([2], subset_by=\"layers\")\n",
        "print(list(C.get_nodes()))\n",
        "\n",
        "C = B.subnetwork([2], subset_by=\"node_names\")\n",
        "print(list(C.get_nodes()))\n",
        "\n",
        "C = B.subnetwork([(1, 1), (1, 2)], subset_by=\"node_layer_names\")\n",
        "print(list(C.get_nodes()))\n",
        "\n",
        "# coupled edges\n",
        "B.monitor(list(B.get_edges(multiplex_edges=True)))\n",
        "\n",
        "# non-coupled edges\n",
        "B.monitor(list(B.get_edges(multiplex_edges=False)))\n",
        "\n",
        "# visualize this toy example\n",
        "# B.visualize_network(show=True,resolution=0.01)\n",
        "\n",
        "# nodes can also be removed easily\n",
        "B.remove_edges(\n",
        "    [[1, 1, 2, 1, 1], [1, 2, 3, 2, 1], [1, 2, 3, 1, 1], [2, 1, 3, 2, 1]],\n",
        "    input_type=\"list\")\n",
        "print(list(B.get_edges()))\n",
        "\n",
        "B.remove_nodes([(1, 1), (3, 1)], input_type=\"list\")\n",
        "print(list(B.get_nodes()))\n",
        "\n",
        "B.remove_nodes({\"source\":2,\"type\":1}, input_type=\"dict\")\n",
        "print(list(B.get_nodes()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qc07iRp7Ovbo",
        "outputId": "79a1ef3e-1ecf-41d2-ca6c-2a12f05048f6"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(1, 2), (3, 2)]\n",
            "[(2, 1)]\n",
            "[(1, 2), (1, 1)]\n",
            "-------------------- \n",
            " [((1, 1), (2, 1)), ((2, 1), (3, 2)), ((1, 2), (3, 2)), ((1, 2), (3, 1))] \n",
            " --------------------\n",
            "-------------------- \n",
            " [((1, 1), (2, 1), 0), ((2, 1), (3, 2), 0), ((1, 2), (3, 2), 0), ((1, 2), (3, 1), 0)] \n",
            " --------------------\n",
            "[]\n",
            "[(2, 1), (1, 2), (3, 2)]\n",
            "[(1, 2), (3, 2)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "A = multilayer_network\n",
        "\n",
        "\n",
        "# this is nicer printing.\n",
        "A.monitor(\"Edge looping:\")\n",
        "\n",
        "# looping through edges:\n",
        "for edge in A.get_edges(data=True):\n",
        "    print(edge)\n",
        "\n",
        "A.monitor(\"Node looping:\")\n",
        "\n",
        "# what about nodes?\n",
        "for node in A.get_nodes(data=True):\n",
        "    print(node)\n",
        "\n",
        "C1 = A.subnetwork(['1'], subset_by=\"layers\")\n",
        "A.monitor(list(C1.get_nodes()))\n",
        "\n",
        "C2 = A.subnetwork(['1'], subset_by=\"node_names\")\n",
        "A.monitor(list(C2.get_nodes()))\n",
        "\n",
        "C3 = A.subnetwork([('1', '1'), ('2', '1')], subset_by=\"node_layer_names\")\n",
        "A.monitor(list(C3.get_nodes()))\n",
        "\n",
        "centralities = C1.monoplex_nx_wrapper(\"degree_centrality\")\n",
        "A.monitor(centralities)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GR-2r5z6Py6M",
        "outputId": "ec73376a-6c18-4716-d6bc-451d4a19a8b0"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Edge looping: \n",
            " --------------------\n",
            "(('16417', 'purchase'), ('D14973', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D14973', 'D_level_item'), ('16417', 'purchase'), {'type': 'purchased'})\n",
            "(('D11300', 'D_level_item'), ('21544', 'purchase'), {'type': 'purchased'})\n",
            "(('21544', 'purchase'), ('D11300', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('B00058', 'B_level_item'), ('5029', 'purchase'), {'type': 'purchased'})\n",
            "(('B00058', 'B_level_item'), ('5029', 'purchase'), {'type': 'purchased'})\n",
            "(('B00058', 'B_level_item'), ('5029', 'purchase'), {'type': 'purchased'})\n",
            "(('B00058', 'B_level_item'), ('23842', 'purchase'), {'type': 'purchased'})\n",
            "(('B00058', 'B_level_item'), ('23842', 'purchase'), {'type': 'purchased'})\n",
            "(('5029', 'purchase'), ('B00058', 'B_level_item'), {'type': 'purchased_by'})\n",
            "(('5029', 'purchase'), ('B00058', 'B_level_item'), {'type': 'purchased_by'})\n",
            "(('5029', 'purchase'), ('B00058', 'B_level_item'), {'type': 'purchased_by'})\n",
            "(('23842', 'purchase'), ('B00058', 'B_level_item'), {'type': 'purchased_by'})\n",
            "(('23842', 'purchase'), ('B00058', 'B_level_item'), {'type': 'purchased_by'})\n",
            "(('8291', 'purchase'), ('D11949', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('8291', 'purchase'), ('D11945', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D11949', 'D_level_item'), ('8291', 'purchase'), {'type': 'purchased'})\n",
            "(('D11945', 'D_level_item'), ('8291', 'purchase'), {'type': 'purchased'})\n",
            "(('D25899', 'D_level_item'), ('1131', 'purchase'), {'type': 'purchased'})\n",
            "(('D25899', 'D_level_item'), ('1511', 'purchase'), {'type': 'purchased'})\n",
            "(('1131', 'purchase'), ('D25899', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('1511', 'purchase'), ('D25899', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('16495', 'purchase'), ('D04248', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D04248', 'D_level_item'), ('16495', 'purchase'), {'type': 'purchased'})\n",
            "(('D14034', 'D_level_item'), ('16775', 'purchase'), {'type': 'purchased'})\n",
            "(('16775', 'purchase'), ('D14034', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('8337', 'purchase'), ('D06344', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D06344', 'D_level_item'), ('8337', 'purchase'), {'type': 'purchased'})\n",
            "(('D06344', 'D_level_item'), ('8394', 'purchase'), {'type': 'purchased'})\n",
            "(('D06344', 'D_level_item'), ('16161', 'purchase'), {'type': 'purchased'})\n",
            "(('24723', 'purchase'), ('D15201', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D15201', 'D_level_item'), ('24723', 'purchase'), {'type': 'purchased'})\n",
            "(('D15776', 'D_level_item'), ('4493', 'purchase'), {'type': 'purchased'})\n",
            "(('4493', 'purchase'), ('D15776', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('4493', 'purchase'), ('D15774', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D15580', 'D_level_item'), ('9738', 'purchase'), {'type': 'purchased'})\n",
            "(('9738', 'purchase'), ('D15580', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('8374', 'purchase'), ('D23691', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D23691', 'D_level_item'), ('8374', 'purchase'), {'type': 'purchased'})\n",
            "(('16575', 'purchase'), ('D33619', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D33619', 'D_level_item'), ('16575', 'purchase'), {'type': 'purchased'})\n",
            "(('8394', 'purchase'), ('D06344', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D04291', 'D_level_item'), ('4804', 'purchase'), {'type': 'purchased'})\n",
            "(('4804', 'purchase'), ('D04291', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('4804', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D00124', 'D_level_item'), ('15659', 'purchase'), {'type': 'purchased'})\n",
            "(('15659', 'purchase'), ('D00124', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('16625', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('C00053', 'C_level_item'), ('16625', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('9453', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('9827', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('9827', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('9827', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('9827', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('1775', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('11733', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('3610', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('20142', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('4804', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('4852', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('5847', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('22512', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('15394', 'purchase'), {'type': 'purchased'})\n",
            "(('16629', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('C00003', 'C_level_item'), ('16629', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('16664', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('25216', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('25216', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('8908', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('8908', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('25372', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('823', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('17332', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('17416', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('17487', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('17487', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('9316', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('17666', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('17666', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('9719', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('9719', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('9866', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('1739', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18186', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10076', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10076', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10076', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10076', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10076', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10076', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18280', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18280', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18581', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10548', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10554', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10561', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18760', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18796', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18796', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10613', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10613', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('2533', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10812', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10812', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27370', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27496', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27495', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27495', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27495', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27535', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27535', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11151', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3129', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3247', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3260', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3393', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3393', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27987', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('19817', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3500', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('28077', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11875', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11875', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11875', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3723', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('28311', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3735', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3746', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11974', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11974', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11974', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('28728', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('28728', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('28765', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('28766', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('12481', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('12481', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('12481', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('20930', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('21276', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('21628', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('5291', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('5300', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('5319', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('5341', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('5355', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('13684', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('6006', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14240', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14240', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14240', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14240', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('6211', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14691', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14830', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('23032', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('23032', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('23032', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14913', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('6871', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('23740', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('7448', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('7448', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('15706', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('15773', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('15949', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('15949', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('24173', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('7895', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('24383', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('24383', 'purchase'), {'type': 'purchased'})\n",
            "(('255', 'purchase'), ('D03133', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D03133', 'D_level_item'), ('255', 'purchase'), {'type': 'purchased'})\n",
            "(('8467', 'purchase'), ('D16621', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D16621', 'D_level_item'), ('8467', 'purchase'), {'type': 'purchased'})\n",
            "(('16664', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D13441', 'D_level_item'), ('23089', 'purchase'), {'type': 'purchased'})\n",
            "(('23089', 'purchase'), ('D13441', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D29774', 'D_level_item'), ('2539', 'purchase'), {'type': 'purchased'})\n",
            "(('2539', 'purchase'), ('D29774', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('25042', 'purchase'), ('D11862', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D11862', 'D_level_item'), ('25042', 'purchase'), {'type': 'purchased'})\n",
            "(('8701', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('A00011', 'A_level_item'), ('8701', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('8759', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('2368', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('19892', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('29357', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('4962', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('D02396', 'D_level_item'), ('3644', 'purchase'), {'type': 'purchased'})\n",
            "(('3644', 'purchase'), ('D02396', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('3644', 'purchase'), ('D02390', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('8753', 'purchase'), ('D12902', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D12902', 'D_level_item'), ('8753', 'purchase'), {'type': 'purchased'})\n",
            "(('8759', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('8799', 'purchase'), ('D29015', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D29015', 'D_level_item'), ('8799', 'purchase'), {'type': 'purchased'})\n",
            "(('25216', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('25216', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('675', 'purchase'), ('D01120', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D01120', 'D_level_item'), ('675', 'purchase'), {'type': 'purchased'})\n",
            "(('8867', 'purchase'), ('D13019', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D13019', 'D_level_item'), ('8867', 'purchase'), {'type': 'purchased'})\n",
            "(('686', 'purchase'), ('D13744', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D13744', 'D_level_item'), ('686', 'purchase'), {'type': 'purchased'})\n",
            "(('17080', 'purchase'), ('D34003', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D34003', 'D_level_item'), ('17080', 'purchase'), {'type': 'purchased'})\n",
            "(('8908', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('8908', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('25294', 'purchase'), ('D25484', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D25484', 'D_level_item'), ('25294', 'purchase'), {'type': 'purchased'})\n",
            "(('17104', 'purchase'), ('D20276', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D20276', 'D_level_item'), ('17104', 'purchase'), {'type': 'purchased'})\n",
            "(('D20276', 'D_level_item'), ('10199', 'purchase'), {'type': 'purchased'})\n",
            "(('767', 'purchase'), ('D07812', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D07812', 'D_level_item'), ('767', 'purchase'), {'type': 'purchased'})\n",
            "(('25354', 'purchase'), ('D17306', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D17306', 'D_level_item'), ('25354', 'purchase'), {'type': 'purchased'})\n",
            "(('25372', 'purchase'), ('D31646', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('25372', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('25372', 'purchase'), ('D35568', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D31646', 'D_level_item'), ('25372', 'purchase'), {'type': 'purchased'})\n",
            "(('D35568', 'D_level_item'), ('25372', 'purchase'), {'type': 'purchased'})\n",
            "(('D34290', 'D_level_item'), ('22689', 'purchase'), {'type': 'purchased'})\n",
            "(('22689', 'purchase'), ('D34290', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('823', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('848', 'purchase'), ('D05074', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D05074', 'D_level_item'), ('848', 'purchase'), {'type': 'purchased'})\n",
            "(('25447', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('C00113', 'C_level_item'), ('25447', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('26283', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('10023', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('18228', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('19702', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('22104', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('22104', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('22104', 'purchase'), {'type': 'purchased'})\n",
            "(('17332', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D34569', 'D_level_item'), ('14913', 'purchase'), {'type': 'purchased'})\n",
            "(('14913', 'purchase'), ('D34569', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('14913', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('17356', 'purchase'), ('D01030', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D01030', 'D_level_item'), ('17356', 'purchase'), {'type': 'purchased'})\n",
            "(('D20193', 'D_level_item'), ('22932', 'purchase'), {'type': 'purchased'})\n",
            "(('22932', 'purchase'), ('D20193', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('17416', 'purchase'), ('D01152', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('17416', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D01152', 'D_level_item'), ('17416', 'purchase'), {'type': 'purchased'})\n",
            "(('9233', 'purchase'), ('D14305', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D14305', 'D_level_item'), ('9233', 'purchase'), {'type': 'purchased'})\n",
            "(('9241', 'purchase'), ('C00138', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('C00138', 'C_level_item'), ('9241', 'purchase'), {'type': 'purchased'})\n",
            "(('9246', 'purchase'), ('D14365', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D14365', 'D_level_item'), ('9246', 'purchase'), {'type': 'purchased'})\n",
            "(('D16589', 'D_level_item'), ('9653', 'purchase'), {'type': 'purchased'})\n",
            "(('9653', 'purchase'), ('D16589', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('9284', 'purchase'), ('D25734', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D25734', 'D_level_item'), ('9284', 'purchase'), {'type': 'purchased'})\n",
            "(('17487', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('17487', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9316', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9370', 'purchase'), ('C00054', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('C00054', 'C_level_item'), ('9370', 'purchase'), {'type': 'purchased'})\n",
            "(('C00054', 'C_level_item'), ('3087', 'purchase'), {'type': 'purchased'})\n",
            "(('C00054', 'C_level_item'), ('5848', 'purchase'), {'type': 'purchased'})\n",
            "(('1180', 'purchase'), ('D16559', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D16559', 'D_level_item'), ('1180', 'purchase'), {'type': 'purchased'})\n",
            "(('17632', 'purchase'), ('D05303', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('17632', 'purchase'), ('B00072', 'B_level_item'), {'type': 'purchased_by'})\n",
            "(('D05303', 'D_level_item'), ('17632', 'purchase'), {'type': 'purchased'})\n",
            "(('B00072', 'B_level_item'), ('17632', 'purchase'), {'type': 'purchased'})\n",
            "(('9453', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('17666', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('17666', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D00064', 'D_level_item'), ('19806', 'purchase'), {'type': 'purchased'})\n",
            "(('19806', 'purchase'), ('D00064', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('19806', 'purchase'), ('D01252', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('25903', 'purchase'), ('D18127', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D18127', 'D_level_item'), ('25903', 'purchase'), {'type': 'purchased'})\n",
            "(('D02908', 'D_level_item'), ('27719', 'purchase'), {'type': 'purchased'})\n",
            "(('27719', 'purchase'), ('D02908', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D29979', 'D_level_item'), ('26337', 'purchase'), {'type': 'purchased'})\n",
            "(('26337', 'purchase'), ('D29979', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('26337', 'purchase'), ('D29948', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('26337', 'purchase'), ('D29963', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D14748', 'D_level_item'), ('19470', 'purchase'), {'type': 'purchased'})\n",
            "(('19470', 'purchase'), ('D14748', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('1515', 'purchase'), ('D00509', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D00509', 'D_level_item'), ('1515', 'purchase'), {'type': 'purchased'})\n",
            "(('9719', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9719', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D00308', 'D_level_item'), ('18581', 'purchase'), {'type': 'purchased'})\n",
            "(('18581', 'purchase'), ('D00308', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('18581', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9827', 'purchase'), ('D02470', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('9827', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9827', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9827', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9827', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D02470', 'D_level_item'), ('9827', 'purchase'), {'type': 'purchased'})\n",
            "(('D12634', 'D_level_item'), ('23816', 'purchase'), {'type': 'purchased'})\n",
            "(('23816', 'purchase'), ('D12634', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('9866', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('26283', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D19500', 'D_level_item'), ('18796', 'purchase'), {'type': 'purchased'})\n",
            "(('18796', 'purchase'), ('D19500', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('18796', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('18796', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('1739', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D29948', 'D_level_item'), ('26337', 'purchase'), {'type': 'purchased'})\n",
            "(('D29948', 'D_level_item'), ('27316', 'purchase'), {'type': 'purchased'})\n",
            "(('D29963', 'D_level_item'), ('26337', 'purchase'), {'type': 'purchased'})\n",
            "(('1775', 'purchase'), ('D12319', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('1775', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D12319', 'D_level_item'), ('1775', 'purchase'), {'type': 'purchased'})\n",
            "(('9987', 'purchase'), ('D07360', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D07360', 'D_level_item'), ('9987', 'purchase'), {'type': 'purchased'})\n",
            "(('D07360', 'D_level_item'), ('21091', 'purchase'), {'type': 'purchased'})\n",
            "(('D05440', 'D_level_item'), ('22317', 'purchase'), {'type': 'purchased'})\n",
            "(('22317', 'purchase'), ('D05440', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('18186', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10023', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('18228', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10076', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10076', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10076', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10076', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10076', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10076', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('18280', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('18280', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10088', 'purchase'), ('D16573', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D16573', 'D_level_item'), ('10088', 'purchase'), {'type': 'purchased'})\n",
            "(('D26612', 'D_level_item'), ('11535', 'purchase'), {'type': 'purchased'})\n",
            "(('11535', 'purchase'), ('D26612', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D28582', 'D_level_item'), ('12974', 'purchase'), {'type': 'purchased'})\n",
            "(('12974', 'purchase'), ('D28582', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('10199', 'purchase'), ('D20276', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D08650', 'D_level_item'), ('7013', 'purchase'), {'type': 'purchased'})\n",
            "(('7013', 'purchase'), ('D08650', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('26634', 'purchase'), ('D25325', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D25325', 'D_level_item'), ('26634', 'purchase'), {'type': 'purchased'})\n",
            "(('10260', 'purchase'), ('D16002', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D16002', 'D_level_item'), ('10260', 'purchase'), {'type': 'purchased'})\n",
            "(('D17702', 'D_level_item'), ('24000', 'purchase'), {'type': 'purchased'})\n",
            "(('24000', 'purchase'), ('D17702', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('24000', 'purchase'), ('D05692', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('3087', 'purchase'), ('C00054', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('3087', 'purchase'), ('D02670', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('5848', 'purchase'), ('C00054', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('2165', 'purchase'), ('D06578', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D06578', 'D_level_item'), ('2165', 'purchase'), {'type': 'purchased'})\n",
            "(('D06578', 'D_level_item'), ('20817', 'purchase'), {'type': 'purchased'})\n",
            "(('2169', 'purchase'), ('D06447', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D06447', 'D_level_item'), ('2169', 'purchase'), {'type': 'purchased'})\n",
            "(('26790', 'purchase'), ('D19890', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D19890', 'D_level_item'), ('26790', 'purchase'), {'type': 'purchased'})\n",
            "(('18703', 'purchase'), ('D02895', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D02895', 'D_level_item'), ('18703', 'purchase'), {'type': 'purchased'})\n",
            "(('D35650', 'D_level_item'), ('28880', 'purchase'), {'type': 'purchased'})\n",
            "(('28880', 'purchase'), ('D35650', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('10548', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('26934', 'purchase'), ('D11126', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D11126', 'D_level_item'), ('26934', 'purchase'), {'type': 'purchased'})\n",
            "(('10554', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('2368', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('10561', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('18760', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10613', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10613', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10671', 'purchase'), ('D19482', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D19482', 'D_level_item'), ('10671', 'purchase'), {'type': 'purchased'})\n",
            "(('2499', 'purchase'), ('D01508', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D01508', 'D_level_item'), ('2499', 'purchase'), {'type': 'purchased'})\n",
            "(('D10503', 'D_level_item'), ('7589', 'purchase'), {'type': 'purchased'})\n",
            "(('7589', 'purchase'), ('D10503', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('2533', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D05692', 'D_level_item'), ('24000', 'purchase'), {'type': 'purchased'})\n",
            "(('D04255', 'D_level_item'), ('6926', 'purchase'), {'type': 'purchased'})\n",
            "(('6926', 'purchase'), ('D04255', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('18950', 'purchase'), ('D21119', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D21119', 'D_level_item'), ('18950', 'purchase'), {'type': 'purchased'})\n",
            "(('10812', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10812', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('21091', 'purchase'), ('D07360', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('C00418', 'C_level_item'), ('12980', 'purchase'), {'type': 'purchased'})\n",
            "(('12980', 'purchase'), ('C00418', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D30187', 'D_level_item'), ('29221', 'purchase'), {'type': 'purchased'})\n",
            "(('29221', 'purchase'), ('D30187', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('29221', 'purchase'), ('D14475', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D07251', 'D_level_item'), ('23740', 'purchase'), {'type': 'purchased'})\n",
            "(('D07251', 'D_level_item'), ('7448', 'purchase'), {'type': 'purchased'})\n",
            "(('23740', 'purchase'), ('D07251', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('23740', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('7448', 'purchase'), ('D07251', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('7448', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('7448', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('19082', 'purchase'), ('D21826', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D21826', 'D_level_item'), ('19082', 'purchase'), {'type': 'purchased'})\n",
            "(('27316', 'purchase'), ('D29948', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('27370', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11006', 'purchase'), ('D18788', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D18788', 'D_level_item'), ('11006', 'purchase'), {'type': 'purchased'})\n",
            "(('D03816', 'D_level_item'), ('19603', 'purchase'), {'type': 'purchased'})\n",
            "(('19603', 'purchase'), ('D03816', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('27423', 'purchase'), ('D13673', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D13673', 'D_level_item'), ('27423', 'purchase'), {'type': 'purchased'})\n",
            "(('D08986', 'D_level_item'), ('2951', 'purchase'), {'type': 'purchased'})\n",
            "(('2951', 'purchase'), ('D08986', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('11093', 'purchase'), ('D25172', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D25172', 'D_level_item'), ('11093', 'purchase'), {'type': 'purchased'})\n",
            "(('27496', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('27495', 'purchase'), ('D05655', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('27495', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('27495', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('27495', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D05655', 'D_level_item'), ('27495', 'purchase'), {'type': 'purchased'})\n",
            "(('11137', 'purchase'), ('D21354', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D21354', 'D_level_item'), ('11137', 'purchase'), {'type': 'purchased'})\n",
            "(('27535', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('27535', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11151', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11194', 'purchase'), ('C00273', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('C00273', 'C_level_item'), ('11194', 'purchase'), {'type': 'purchased'})\n",
            "(('D02670', 'D_level_item'), ('3087', 'purchase'), {'type': 'purchased'})\n",
            "(('11294', 'purchase'), ('D20870', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('11294', 'purchase'), ('D19225', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D20870', 'D_level_item'), ('11294', 'purchase'), {'type': 'purchased'})\n",
            "(('D20870', 'D_level_item'), ('11296', 'purchase'), {'type': 'purchased'})\n",
            "(('D19225', 'D_level_item'), ('11294', 'purchase'), {'type': 'purchased'})\n",
            "(('11296', 'purchase'), ('D20870', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('3110', 'purchase'), ('D01807', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D01807', 'D_level_item'), ('3110', 'purchase'), {'type': 'purchased'})\n",
            "(('3129', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D29020', 'D_level_item'), ('28103', 'purchase'), {'type': 'purchased'})\n",
            "(('28103', 'purchase'), ('D29020', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D06931', 'D_level_item'), ('5960', 'purchase'), {'type': 'purchased'})\n",
            "(('5960', 'purchase'), ('D06931', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('3247', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('3260', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('19702', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('22104', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('22104', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('22104', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('19687', 'purchase'), ('D15209', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D15209', 'D_level_item'), ('19687', 'purchase'), {'type': 'purchased'})\n",
            "(('D04717', 'D_level_item'), ('19987', 'purchase'), {'type': 'purchased'})\n",
            "(('19987', 'purchase'), ('D04717', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('11563', 'purchase'), ('D28464', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D28464', 'D_level_item'), ('11563', 'purchase'), {'type': 'purchased'})\n",
            "(('3393', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('3393', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('27987', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D01252', 'D_level_item'), ('19806', 'purchase'), {'type': 'purchased'})\n",
            "(('D01252', 'D_level_item'), ('15754', 'purchase'), {'type': 'purchased'})\n",
            "(('19817', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D21744', 'D_level_item'), ('7960', 'purchase'), {'type': 'purchased'})\n",
            "(('7960', 'purchase'), ('D21744', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('3500', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('28077', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D22725', 'D_level_item'), ('12615', 'purchase'), {'type': 'purchased'})\n",
            "(('12615', 'purchase'), ('D22725', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('19892', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('D26502', 'D_level_item'), ('28598', 'purchase'), {'type': 'purchased'})\n",
            "(('28598', 'purchase'), ('D26502', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('28598', 'purchase'), ('D26519', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('11733', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D01200', 'D_level_item'), ('16324', 'purchase'), {'type': 'purchased'})\n",
            "(('16324', 'purchase'), ('D01200', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('28129', 'purchase'), ('D24541', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D24541', 'D_level_item'), ('28129', 'purchase'), {'type': 'purchased'})\n",
            "(('3610', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D20207', 'D_level_item'), ('11875', 'purchase'), {'type': 'purchased'})\n",
            "(('11875', 'purchase'), ('D20207', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('11875', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11875', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11875', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D02390', 'D_level_item'), ('3644', 'purchase'), {'type': 'purchased'})\n",
            "(('16161', 'purchase'), ('D06344', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('3723', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('28311', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('3735', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('3746', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('20142', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11974', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11974', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11974', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('3836', 'purchase'), ('D10791', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D10791', 'D_level_item'), ('3836', 'purchase'), {'type': 'purchased'})\n",
            "(('20334', 'purchase'), ('D12877', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D12877', 'D_level_item'), ('20334', 'purchase'), {'type': 'purchased'})\n",
            "(('D26519', 'D_level_item'), ('28598', 'purchase'), {'type': 'purchased'})\n",
            "(('D15639', 'D_level_item'), ('29816', 'purchase'), {'type': 'purchased'})\n",
            "(('29816', 'purchase'), ('D15639', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D04798', 'D_level_item'), ('5259', 'purchase'), {'type': 'purchased'})\n",
            "(('5259', 'purchase'), ('D04798', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('28728', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('28728', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4152', 'purchase'), ('D27160', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D27160', 'D_level_item'), ('4152', 'purchase'), {'type': 'purchased'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('28765', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('28766', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('12481', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('12481', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('12481', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4314', 'purchase'), ('D24092', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D24092', 'D_level_item'), ('4314', 'purchase'), {'type': 'purchased'})\n",
            "(('4363', 'purchase'), ('D02624', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D02624', 'D_level_item'), ('4363', 'purchase'), {'type': 'purchased'})\n",
            "(('20817', 'purchase'), ('D06578', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D15774', 'D_level_item'), ('4493', 'purchase'), {'type': 'purchased'})\n",
            "(('20895', 'purchase'), ('D06106', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D06106', 'D_level_item'), ('20895', 'purchase'), {'type': 'purchased'})\n",
            "(('12729', 'purchase'), ('D22137', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D22137', 'D_level_item'), ('12729', 'purchase'), {'type': 'purchased'})\n",
            "(('20930', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('20930', 'purchase'), ('D06630', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D06630', 'D_level_item'), ('20930', 'purchase'), {'type': 'purchased'})\n",
            "(('D14475', 'D_level_item'), ('29221', 'purchase'), {'type': 'purchased'})\n",
            "(('D30760', 'D_level_item'), ('29307', 'purchase'), {'type': 'purchased'})\n",
            "(('29307', 'purchase'), ('D30760', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('29327', 'purchase'), ('D30848', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D30848', 'D_level_item'), ('29327', 'purchase'), {'type': 'purchased'})\n",
            "(('29357', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('4852', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('21276', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4962', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('5066', 'purchase'), ('D25861', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D25861', 'D_level_item'), ('5066', 'purchase'), {'type': 'purchased'})\n",
            "(('D16403', 'D_level_item'), ('5483', 'purchase'), {'type': 'purchased'})\n",
            "(('5483', 'purchase'), ('D16403', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('21628', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('5291', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('5300', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('5319', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('13519', 'purchase'), ('D32926', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D32926', 'D_level_item'), ('13519', 'purchase'), {'type': 'purchased'})\n",
            "(('5341', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('5355', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13684', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D33797', 'D_level_item'), ('14476', 'purchase'), {'type': 'purchased'})\n",
            "(('14476', 'purchase'), ('D33797', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('5847', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('6006', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('14240', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('14240', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('14240', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('14240', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('22512', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D18293', 'D_level_item'), ('23276', 'purchase'), {'type': 'purchased'})\n",
            "(('23276', 'purchase'), ('D18293', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('6211', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('22757', 'purchase'), ('D10783', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D10783', 'D_level_item'), ('22757', 'purchase'), {'type': 'purchased'})\n",
            "(('15754', 'purchase'), ('D01252', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('15394', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('14691', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('14830', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('23032', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('23032', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('23032', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('6871', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('23585', 'purchase'), ('D15125', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D15125', 'D_level_item'), ('23585', 'purchase'), {'type': 'purchased'})\n",
            "(('23603', 'purchase'), ('D12066', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D12066', 'D_level_item'), ('23603', 'purchase'), {'type': 'purchased'})\n",
            "(('15706', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('15773', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('15949', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('15949', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('24173', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('7895', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('24383', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('24383', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('15822', 'purchase'), ('D02542', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D02542', 'D_level_item'), ('15822', 'purchase'), {'type': 'purchased'})\n",
            "(('24188', 'purchase'), ('D32961', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D32961', 'D_level_item'), ('24188', 'purchase'), {'type': 'purchased'})\n",
            "(('D27713', 'D_level_item'), ('8031', 'purchase'), {'type': 'purchased'})\n",
            "(('8031', 'purchase'), ('D27713', 'D_level_item'), {'type': 'purchased_by'})\n",
            "-------------------- \n",
            " Node looping: \n",
            " --------------------\n",
            "(('16417', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16417', 'pos': array([0.2771711 , 0.39107024])})\n",
            "(('D14973', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.13133022, 0.30394729])})\n",
            "(('D11300', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.11356044, 0.34829266])})\n",
            "(('21544', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '21544', 'pos': array([0.13431597, 0.44284929])})\n",
            "(('B00058', 'B_level_item'), {'type': 'B_level_item', 'pos': array([0.5, 0. ])})\n",
            "(('5029', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5029', 'pos': array([0.18738078, 0.32339188])})\n",
            "(('23842', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23842', 'pos': array([0.18237773, 0.09067859])})\n",
            "(('8291', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8291', 'pos': array([0.12516496, 0.34982232])})\n",
            "(('D11949', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.5       , 0.26628115])})\n",
            "(('D11945', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25419922, 0.27668375])})\n",
            "(('D25899', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.21397638, 0.17933858])})\n",
            "(('1131', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '1131', 'pos': array([0.11508489, 0.12813445])})\n",
            "(('1511', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '1511', 'pos': array([0.08948503, 0.32133616])})\n",
            "(('16495', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16495', 'pos': array([0.21323822, 0.39445249])})\n",
            "(('D04248', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.30849965, 0.31639052])})\n",
            "(('D14034', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.098889  , 0.13573437])})\n",
            "(('16775', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16775', 'pos': array([0.24584435, 0.16796049])})\n",
            "(('8337', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '8337', 'pos': array([0.25367442, 0.23622027])})\n",
            "(('D06344', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.33945824, 0.1183269 ])})\n",
            "(('24723', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '24723', 'pos': array([0.11821767, 0.16689848])})\n",
            "(('D15201', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.40537079, 0.17750266])})\n",
            "(('D15776', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.46102273, 0.34302751])})\n",
            "(('4493', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '4493', 'pos': array([0.25361949, 0.25870355])})\n",
            "(('D15580', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.29627449, 0.03180114])})\n",
            "(('9738', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9738', 'pos': array([0.21678937, 0.36120035])})\n",
            "(('8374', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '8374', 'pos': array([0.16750151, 0.48424471])})\n",
            "(('D23691', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.29082841, 0.26324598])})\n",
            "(('16575', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16575', 'pos': array([0.17845728, 0.29062496])})\n",
            "(('D33619', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.16869121, 0.04199781])})\n",
            "(('8394', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8394', 'pos': array([0.45960169, 0.23153058])})\n",
            "(('D04291', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.09662359, 0.29416957])})\n",
            "(('4804', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '4804', 'pos': array([0.08385647, 0.34673305])})\n",
            "(('D00124', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.1692662 , 0.16160184])})\n",
            "(('15659', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15659', 'pos': array([0.13444028, 0.25648261])})\n",
            "(('16625', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16625', 'pos': array([0.22958599, 0.27974977])})\n",
            "(('C00053', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.25666599, 0.        ])})\n",
            "(('16629', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16629', 'pos': array([0.23927538, 0.25273844])})\n",
            "(('C00003', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.45287308, 0.3621064 ])})\n",
            "(('255', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '255', 'pos': array([0.21502037, 0.2807297 ])})\n",
            "(('D03133', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.28981679, 0.07932703])})\n",
            "(('8467', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8467', 'pos': array([0.27506986, 0.13555987])})\n",
            "(('D16621', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.43432378, 0.27245619])})\n",
            "(('16664', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16664', 'pos': array([0.23777463, 0.46655964])})\n",
            "(('D13441', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22144484, 0.24043131])})\n",
            "(('23089', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23089', 'pos': array([0.24585046, 0.21521402])})\n",
            "(('D29774', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.3887461 , 0.36037144])})\n",
            "(('2539', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '2539', 'pos': array([0.26982941, 0.24453344])})\n",
            "(('25042', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '25042', 'pos': array([0.34252132, 0.24451573])})\n",
            "(('D11862', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25429798, 0.41409642])})\n",
            "(('8701', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8701', 'pos': array([0.24604884, 0.33639558])})\n",
            "(('A00011', 'A_level_item'), {'type': 'A_level_item', 'pos': array([nan, nan])})\n",
            "(('D02396', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.11212923, 0.22191354])})\n",
            "(('3644', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '3644', 'pos': array([0.38375794, 0.20466028])})\n",
            "(('8753', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8753', 'pos': array([0.01462359, 0.28378576])})\n",
            "(('D12902', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.20584088, 0.24026517])})\n",
            "(('8759', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '8759', 'pos': array([0.2664109, 0.2737514])})\n",
            "(('8799', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8799', 'pos': array([0.35343125, 0.28704514])})\n",
            "(('D29015', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.2092628 , 0.21112077])})\n",
            "(('25216', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '25216', 'pos': array([0.24629709, 0.36429659])})\n",
            "(('675', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '675', 'pos': array([0.26876433, 0.25775444])})\n",
            "(('D01120', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25418349, 0.01321298])})\n",
            "(('8867', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8867', 'pos': array([0.36409303, 0.06219464])})\n",
            "(('D13019', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.29440817, 0.24122036])})\n",
            "(('686', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '686', 'pos': array([0.32763945, 0.11716983])})\n",
            "(('D13744', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.33602896, 0.17449112])})\n",
            "(('17080', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17080', 'pos': array([0.16797811, 0.15822335])})\n",
            "(('D34003', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.40736787, 0.24044438])})\n",
            "(('8908', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '8908', 'pos': array([0.11108857, 0.08257294])})\n",
            "(('25294', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '25294', 'pos': array([0.29571392, 0.47759095])})\n",
            "(('D25484', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.33195608, 0.29562566])})\n",
            "(('17104', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17104', 'pos': array([0.25550497, 0.27703639])})\n",
            "(('D20276', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.02138523, 0.32019034])})\n",
            "(('767', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '767', 'pos': array([0.07784423, 0.12495435])})\n",
            "(('D07812', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.34934944, 0.02677313])})\n",
            "(('25354', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '25354', 'pos': array([0.19504501, 0.16802707])})\n",
            "(('D17306', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.16872822, 0.39223565])})\n",
            "(('25372', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '25372', 'pos': array([0.42458075, 0.20463007])})\n",
            "(('D31646', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.24626215, 0.24043344])})\n",
            "(('D35568', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.30036996, 0.18105794])})\n",
            "(('D34290', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22776678, 0.28233858])})\n",
            "(('22689', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '22689', 'pos': array([0.40948238, 0.09921021])})\n",
            "(('823', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '823', 'pos': array([0.24585097, 0.23689836])})\n",
            "(('848', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '848', 'pos': array([0.32278301, 0.32588311])})\n",
            "(('D05074', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.11963457, 0.38556385])})\n",
            "(('25447', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '25447', 'pos': array([0.338367  , 0.41134025])})\n",
            "(('C00113', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.10098497, 0.21778718])})\n",
            "(('17332', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17332', 'pos': array([0.21281627, 0.42286458])})\n",
            "(('D34569', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.21858192, 0.15523916])})\n",
            "(('14913', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '14913', 'pos': array([0.37135279, 0.14161148])})\n",
            "(('17356', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '17356', 'pos': array([0.12709255, 0.32969567])})\n",
            "(('D01030', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.21440068, 0.3374311 ])})\n",
            "(('D20193', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.40861634, 0.33091953])})\n",
            "(('22932', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '22932', 'pos': array([0.24576302, 0.18975809])})\n",
            "(('17416', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17416', 'pos': array([0.3744269, 0.3625745])})\n",
            "(('D01152', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25392382, 0.5       ])})\n",
            "(('9233', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9233', 'pos': array([0.28617776, 0.30462826])})\n",
            "(('D14305', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.10869596, 0.18889581])})\n",
            "(('9241', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9241', 'pos': array([0.24287198, 0.24363116])})\n",
            "(('C00138', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.        , 0.37003498])})\n",
            "(('9246', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9246', 'pos': array([0.32674522, 0.16708482])})\n",
            "(('D14365', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.30906985, 0.37387909])})\n",
            "(('D16589', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25429524, 0.15659476])})\n",
            "(('9653', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9653', 'pos': array([0.25894418, 0.24617125])})\n",
            "(('9284', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9284', 'pos': array([0.25941621, 0.21294188])})\n",
            "(('D25734', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.26586842, 0.26332714])})\n",
            "(('17487', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17487', 'pos': array([0.29983558, 0.09346755])})\n",
            "(('9316', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9316', 'pos': array([0.22941405, 0.26219762])})\n",
            "(('9370', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9370', 'pos': array([0.21426631, 0.18737184])})\n",
            "(('C00054', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.25939512, 0.5       ])})\n",
            "(('1180', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '1180', 'pos': array([0.10674623, 0.287103  ])})\n",
            "(('D16559', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.10005009, 0.25043959])})\n",
            "(('17632', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17632', 'pos': array([0.02977727, 0.13165807])})\n",
            "(('D05303', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.07757928, 0.2009235 ])})\n",
            "(('B00072', 'B_level_item'), {'type': 'B_level_item', 'pos': array([0. , 0.5])})\n",
            "(('9453', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9453', 'pos': array([0.1192249 , 0.39264916])})\n",
            "(('17666', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17666', 'pos': array([0.24478147, 0.20571913])})\n",
            "(('D00064', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.05094887, 0.15979415])})\n",
            "(('19806', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19806', 'pos': array([0.2458489 , 0.29275531])})\n",
            "(('25903', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '25903', 'pos': array([0.17033101, 0.32980105])})\n",
            "(('D18127', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.        , 0.26419516])})\n",
            "(('D02908', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.48809686, 0.14663297])})\n",
            "(('27719', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27719', 'pos': array([0.30518996, 0.1634033 ])})\n",
            "(('D29979', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.23800797, 0.19668225])})\n",
            "(('26337', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '26337', 'pos': array([0.2444283 , 0.27983016])})\n",
            "(('D14748', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.01976488, 0.05829173])})\n",
            "(('19470', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19470', 'pos': array([0.15693055, 0.09016387])})\n",
            "(('1515', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '1515', 'pos': array([0.18529059, 0.        ])})\n",
            "(('D00509', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.3440462 , 0.34537758])})\n",
            "(('9719', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9719', 'pos': array([0.        , 0.24323267])})\n",
            "(('D00308', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.17458789, 0.2399754 ])})\n",
            "(('18581', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '18581', 'pos': array([0.26195675, 0.23135407])})\n",
            "(('9827', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9827', 'pos': array([0.06835709, 0.24323099])})\n",
            "(('D02470', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25429792, 0.2106127 ])})\n",
            "(('D12634', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22008545, 0.4469826 ])})\n",
            "(('23816', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23816', 'pos': array([0.02491871, 0.33331335])})\n",
            "(('9866', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9866', 'pos': array([0.33573713, 0.37256657])})\n",
            "(('26283', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '26283', 'pos': array([0.39774849, 0.38840439])})\n",
            "(('D19500', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.17638205, 0.14094041])})\n",
            "(('18796', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '18796', 'pos': array([0.28161499, 0.41500978])})\n",
            "(('1739', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '1739', 'pos': array([0.27247915, 0.33666526])})\n",
            "(('D29948', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25430011, 0.12304898])})\n",
            "(('D29963', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.28051289, 0.23813883])})\n",
            "(('1775', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '1775', 'pos': array([0.20729067, 0.07266235])})\n",
            "(('D12319', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.34603479, 0.2206981 ])})\n",
            "(('9987', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '9987', 'pos': array([0.05414761, 0.38347982])})\n",
            "(('D07360', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.36884462, 0.24676067])})\n",
            "(('D05440', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.27818024, 0.20992861])})\n",
            "(('22317', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '22317', 'pos': array([0.22814925, 0.10960905])})\n",
            "(('18186', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '18186', 'pos': array([0.40738745, 0.45094581])})\n",
            "(('10023', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10023', 'pos': array([0.28732886, 0.22274848])})\n",
            "(('18228', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '18228', 'pos': array([0.26497974, 0.08896122])})\n",
            "(('10076', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10076', 'pos': array([0.16989316, 0.20171568])})\n",
            "(('18280', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '18280', 'pos': array([0.26974663, 0.20456611])})\n",
            "(('10088', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '10088', 'pos': array([0.09923785, 0.10684856])})\n",
            "(('D16573', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.07642782, 0.27639045])})\n",
            "(('D26612', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.18366439, 0.09757413])})\n",
            "(('11535', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11535', 'pos': array([0.24590323, 0.22816012])})\n",
            "(('D28582', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25429806, 0.3492708 ])})\n",
            "(('12974', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '12974', 'pos': array([0.262384, 0.5     ])})\n",
            "(('10199', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10199', 'pos': array([0.3236135, 0.2879179])})\n",
            "(('D08650', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.18736327, 0.42280103])})\n",
            "(('7013', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '7013', 'pos': array([0.16758452, 0.2668197 ])})\n",
            "(('26634', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '26634', 'pos': array([0.11478002, 0.0407129 ])})\n",
            "(('D25325', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.3508167 , 0.39327663])})\n",
            "(('10260', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10260', 'pos': array([0.3982753 , 0.32309328])})\n",
            "(('D16002', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.24466403, 0.25749459])})\n",
            "(('D17702', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.18425596, 0.27387693])})\n",
            "(('24000', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '24000', 'pos': array([0.44772833, 0.2859937 ])})\n",
            "(('3087', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3087', 'pos': array([0.30190052, 0.12219263])})\n",
            "(('5848', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5848', 'pos': array([0.23461063, 0.22001252])})\n",
            "(('2165', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '2165', 'pos': array([0.24585676, 0.1448461 ])})\n",
            "(('D06578', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.28686896, 0.2782841 ])})\n",
            "(('2169', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '2169', 'pos': array([0.28166853, 0.27467537])})\n",
            "(('D06447', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25430129, 0.18231447])})\n",
            "(('26790', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '26790', 'pos': array([0.37164368, 0.22364127])})\n",
            "(('D19890', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.29614676, 0.21366879])})\n",
            "(('18703', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '18703', 'pos': array([0.37337492, 0.25481996])})\n",
            "(('D02895', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.45869498, 0.41223848])})\n",
            "(('D35650', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.26301981, 0.38516098])})\n",
            "(('28880', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28880', 'pos': array([0.09302849, 0.1891444 ])})\n",
            "(('10548', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10548', 'pos': array([0.2273725, 0.1643819])})\n",
            "(('26934', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '26934', 'pos': array([0.39466385, 0.34406521])})\n",
            "(('D11126', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.16292036, 0.2750193 ])})\n",
            "(('10554', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10554', 'pos': array([0.38945501, 0.2419706 ])})\n",
            "(('2368', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '2368', 'pos': array([0.32623986, 0.22653532])})\n",
            "(('10561', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10561', 'pos': array([0.43885852, 0.11568846])})\n",
            "(('18760', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '18760', 'pos': array([0.32592126, 0.45155386])})\n",
            "(('10613', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10613', 'pos': array([0.09169565, 0.24450016])})\n",
            "(('10671', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10671', 'pos': array([0.22347152, 0.14430518])})\n",
            "(('D19482', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.14925904, 0.09353471])})\n",
            "(('2499', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '2499', 'pos': array([0.17728595, 0.21408139])})\n",
            "(('D01508', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22065512, 0.38334447])})\n",
            "(('D10503', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.4092175, 0.2908312])})\n",
            "(('7589', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '7589', 'pos': array([0.33367546, 0.33598726])})\n",
            "(('2533', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '2533', 'pos': array([0.19372119, 0.27973185])})\n",
            "(('D05692', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.28225133, 0.33221242])})\n",
            "(('D04255', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.33679887, 0.08726994])})\n",
            "(('6926', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '6926', 'pos': array([0.21315245, 0.24274076])})\n",
            "(('18950', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '18950', 'pos': array([0.26230844, 0.16329004])})\n",
            "(('D21119', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.35632091, 0.14229022])})\n",
            "(('10812', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10812', 'pos': array([0.18989881, 0.39276939])})\n",
            "(('21091', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '21091', 'pos': array([0.20113582, 0.24450946])})\n",
            "(('C00418', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.24587118, 0.25013445])})\n",
            "(('12980', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '12980', 'pos': array([0.48097862, 0.29666359])})\n",
            "(('D30187', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.43007625, 0.14159214])})\n",
            "(('29221', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '29221', 'pos': array([0.14575953, 0.11098531])})\n",
            "(('D07251', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.3626398 , 0.16688472])})\n",
            "(('23740', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23740', 'pos': array([0.2448566 , 0.05472597])})\n",
            "(('7448', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '7448', 'pos': array([0.03554041, 0.22221377])})\n",
            "(('19082', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19082', 'pos': array([0.31884467, 0.19503916])})\n",
            "(('D21826', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.28368524, 0.31126329])})\n",
            "(('27316', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27316', 'pos': array([0.2792907 , 0.21368227])})\n",
            "(('27370', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27370', 'pos': array([0.16317937, 0.29019495])})\n",
            "(('11006', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11006', 'pos': array([0.2460065 , 0.39395524])})\n",
            "(('D18788', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.15783185, 0.33076191])})\n",
            "(('D03816', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.0721358 , 0.24043167])})\n",
            "(('19603', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '19603', 'pos': array([0.10928619, 0.30865392])})\n",
            "(('27423', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27423', 'pos': array([0.28561845, 0.19518855])})\n",
            "(('D13673', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.05400418, 0.39292808])})\n",
            "(('D08986', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.17402732, 0.30816843])})\n",
            "(('2951', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '2951', 'pos': array([0.37362603, 0.11327011])})\n",
            "(('11093', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11093', 'pos': array([0.3618705 , 0.46415446])})\n",
            "(('D25172', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.09623481, 0.08537073])})\n",
            "(('27496', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27496', 'pos': array([0.16789821, 0.23282486])})\n",
            "(('27495', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27495', 'pos': array([0.30218975, 0.32992918])})\n",
            "(('D05655', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.293786  , 0.12468188])})\n",
            "(('11137', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11137', 'pos': array([0.24586635, 0.24999894])})\n",
            "(('D21354', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.35414692, 0.31660968])})\n",
            "(('27535', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27535', 'pos': array([0.0990818 , 0.38704809])})\n",
            "(('11151', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11151', 'pos': array([0.2363472 , 0.23214591])})\n",
            "(('11194', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '11194', 'pos': array([0.32607295, 0.14836831])})\n",
            "(('C00273', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.5      , 0.0321366])})\n",
            "(('D02670', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25430145, 0.29882771])})\n",
            "(('11294', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '11294', 'pos': array([0.0376638 , 0.19653094])})\n",
            "(('D20870', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.31181008, 0.24086584])})\n",
            "(('D19225', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.14586138, 0.45624903])})\n",
            "(('11296', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '11296', 'pos': array([0.15984855, 0.24453063])})\n",
            "(('3110', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3110', 'pos': array([0.22720966, 0.3291952 ])})\n",
            "(('D01807', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.13995652, 0.15526091])})\n",
            "(('3129', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '3129', 'pos': array([0.12730699, 0.23272828])})\n",
            "(('D29020', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.43716031, 0.19564678])})\n",
            "(('28103', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28103', 'pos': array([0.2983156 , 0.04813063])})\n",
            "(('D06931', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.21622901, 0.10634369])})\n",
            "(('5960', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '5960', 'pos': array([0.3857817 , 0.16225556])})\n",
            "(('3247', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3247', 'pos': array([0.41118949, 0.29713681])})\n",
            "(('3260', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '3260', 'pos': array([0.2778986 , 0.10678833])})\n",
            "(('19702', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '19702', 'pos': array([0.05169694, 0.16328498])})\n",
            "(('22104', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '22104', 'pos': array([0.20693856, 0.09768899])})\n",
            "(('19687', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19687', 'pos': array([0.18490437, 0.24451473])})\n",
            "(('D15209', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.280062  , 0.19527238])})\n",
            "(('D04717', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.28772166, 0.15905435])})\n",
            "(('19987', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19987', 'pos': array([0.36361456, 0.32949478])})\n",
            "(('11563', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11563', 'pos': array([0.36984379, 0.3929868 ])})\n",
            "(('D28464', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.43613754, 0.04469772])})\n",
            "(('3393', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3393', 'pos': array([0.3203949 , 0.25926293])})\n",
            "(('27987', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27987', 'pos': array([0.27470038, 0.23330839])})\n",
            "(('D01252', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.36182359, 0.27808214])})\n",
            "(('19817', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19817', 'pos': array([0.16858228, 0.12406331])})\n",
            "(('D21744', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.21198794, 0.27100577])})\n",
            "(('7960', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '7960', 'pos': array([0.28023626, 0.35911596])})\n",
            "(('3500', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3500', 'pos': array([0.30991543, 0.21630851])})\n",
            "(('28077', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28077', 'pos': array([0.17081049, 0.3613965 ])})\n",
            "(('D22725', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.02149225, 0.12702768])})\n",
            "(('12615', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '12615', 'pos': array([0.21090861, 0.26663367])})\n",
            "(('19892', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19892', 'pos': array([0.33033723, 0.20622903])})\n",
            "(('D26502', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25464288, 0.2405513 ])})\n",
            "(('28598', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28598', 'pos': array([0.44005647, 0.33075051])})\n",
            "(('11733', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11733', 'pos': array([0.27339044, 0.05837833])})\n",
            "(('D01200', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.16915889, 0.3582462 ])})\n",
            "(('16324', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16324', 'pos': array([0.314932  , 0.37581519])})\n",
            "(('28129', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28129', 'pos': array([0.15384965, 0.21144844])})\n",
            "(('D24541', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25429243, 0.09074563])})\n",
            "(('3610', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3610', 'pos': array([0.08734947, 0.2099899 ])})\n",
            "(('D20207', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.44864601, 0.24043172])})\n",
            "(('11875', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11875', 'pos': array([0.24978969, 0.24451004])})\n",
            "(('D02390', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.14804434, 0.        ])})\n",
            "(('16161', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '16161', 'pos': array([0.2132844 , 0.31976472])})\n",
            "(('3723', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3723', 'pos': array([0.20104075, 0.21363006])})\n",
            "(('28311', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '28311', 'pos': array([0.24512465, 0.26399488])})\n",
            "(('3735', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3735', 'pos': array([0.45058733, 0.16170251])})\n",
            "(('3746', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3746', 'pos': array([0.28155469, 0.32693149])})\n",
            "(('20142', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '20142', 'pos': array([0.26034369, 0.30796005])})\n",
            "(('11974', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11974', 'pos': array([0.3254527 , 0.27400559])})\n",
            "(('3836', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '3836', 'pos': array([0.4015779 , 0.26697986])})\n",
            "(('D10791', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.15894556, 0.19857706])})\n",
            "(('20334', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '20334', 'pos': array([0.32796626, 0.09067678])})\n",
            "(('D12877', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.15716145, 0.24040585])})\n",
            "(('D26519', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.23522924, 0.32209057])})\n",
            "(('D15639', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.2386399 , 0.22766366])})\n",
            "(('29816', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '29816', 'pos': array([0.29413072, 0.24450938])})\n",
            "(('D04798', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.40409193, 0.20401225])})\n",
            "(('5259', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5259', 'pos': array([0.08754701, 0.1624973 ])})\n",
            "(('28728', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28728', 'pos': array([0.28757304, 0.00711587])})\n",
            "(('4152', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '4152', 'pos': array([0.24585132, 0.01344507])})\n",
            "(('D27160', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25457748, 0.24718445])})\n",
            "(('4185', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '4185', 'pos': array([0.21389962, 0.20596198])})\n",
            "(('28765', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28765', 'pos': array([0.35912133, 0.01621789])})\n",
            "(('28766', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28766', 'pos': array([0.15707602, 0.41283678])})\n",
            "(('12481', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '12481', 'pos': array([0.31938267, 0.24447942])})\n",
            "(('4314', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '4314', 'pos': array([0.27057234, 0.45088654])})\n",
            "(('D24092', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.33226686, 0.20509831])})\n",
            "(('4363', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '4363', 'pos': array([0.21408569, 0.22847101])})\n",
            "(('D02624', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22244239, 0.25779367])})\n",
            "(('20817', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '20817', 'pos': array([0.31356547, 0.40621007])})\n",
            "(('D15774', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.49764945, 0.19928046])})\n",
            "(('20895', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '20895', 'pos': array([0.18379967, 0.41507532])})\n",
            "(('D06106', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.41550437, 0.1013461 ])})\n",
            "(('12729', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '12729', 'pos': array([0.15669548, 0.3845253 ])})\n",
            "(('D22137', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.06707096, 0.33237421])})\n",
            "(('20930', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '20930', 'pos': array([0.20297734, 0.13211625])})\n",
            "(('D06630', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.34327055, 0.24518241])})\n",
            "(('D14475', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.32106287, 0.27002117])})\n",
            "(('D30760', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.39586997, 0.38774596])})\n",
            "(('29307', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '29307', 'pos': array([0.15336987, 0.17779131])})\n",
            "(('29327', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '29327', 'pos': array([0.17251706, 0.17840971])})\n",
            "(('D30848', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.18268129, 0.20199925])})\n",
            "(('29357', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '29357', 'pos': array([0.2354371 , 0.24449321])})\n",
            "(('4852', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '4852', 'pos': array([0.13631567, 0.29043551])})\n",
            "(('21276', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '21276', 'pos': array([0.15904578, 0.05432117])})\n",
            "(('4962', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '4962', 'pos': array([0.24585173, 0.41612837])})\n",
            "(('5066', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5066', 'pos': array([0.21109607, 0.16384413])})\n",
            "(('D25861', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.38164629, 0.10093026])})\n",
            "(('D16403', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22001839, 0.05804187])})\n",
            "(('5483', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5483', 'pos': array([0.28014945, 0.24748048])})\n",
            "(('21628', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '21628', 'pos': array([0.27706751, 0.28897319])})\n",
            "(('5291', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5291', 'pos': array([0.35465449, 0.16330697])})\n",
            "(('5300', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5300', 'pos': array([0.20325736, 0.33832646])})\n",
            "(('5319', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5319', 'pos': array([0.15621659, 0.32749344])})\n",
            "(('13519', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '13519', 'pos': array([0.27501022, 0.177325  ])})\n",
            "(('D32926', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.30500004, 0.3998949 ])})\n",
            "(('5341', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5341', 'pos': array([0.24543133, 0.09367596])})\n",
            "(('5355', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '5355', 'pos': array([0.29897121, 0.27578188])})\n",
            "(('13668', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '13668', 'pos': array([0.3275074 , 0.04420127])})\n",
            "(('13684', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '13684', 'pos': array([0.35367793, 0.19301189])})\n",
            "(('D33797', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.47715599, 0.3122356 ])})\n",
            "(('14476', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '14476', 'pos': array([0.40948018, 0.15802599])})\n",
            "(('5847', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5847', 'pos': array([0.45048852, 0.3771162 ])})\n",
            "(('6006', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '6006', 'pos': array([0.21299186, 0.01550865])})\n",
            "(('14240', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '14240', 'pos': array([0.36367718, 0.09575387])})\n",
            "(('22512', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '22512', 'pos': array([0.33038168, 0.30645123])})\n",
            "(('D18293', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.26457711, 0.24042936])})\n",
            "(('23276', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23276', 'pos': array([0.42154157, 0.24165919])})\n",
            "(('6211', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '6211', 'pos': array([0.20008773, 0.46447762])})\n",
            "(('22757', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '22757', 'pos': array([0.47647532, 0.19440923])})\n",
            "(('D10783', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.2547712 , 0.22913714])})\n",
            "(('15754', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15754', 'pos': array([0.28484453, 0.16238773])})\n",
            "(('15394', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15394', 'pos': array([0.11614412, 0.20835732])})\n",
            "(('14691', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '14691', 'pos': array([0.24588731, 0.24341204])})\n",
            "(('14830', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '14830', 'pos': array([0.13825878, 0.15556791])})\n",
            "(('23032', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23032', 'pos': array([0.22343519, 0.21512566])})\n",
            "(('6871', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '6871', 'pos': array([0.5       , 0.24648123])})\n",
            "(('23585', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23585', 'pos': array([0.06012591, 0.27379121])})\n",
            "(('D15125', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22804181, 0.21111386])})\n",
            "(('23603', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23603', 'pos': array([0.39845275, 0.18882657])})\n",
            "(('D12066', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.298838  , 0.45759602])})\n",
            "(('15706', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15706', 'pos': array([0.22695469, 0.24100059])})\n",
            "(('15773', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15773', 'pos': array([0.05260639, 0.30135017])})\n",
            "(('15949', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15949', 'pos': array([0.38239233, 0.28871591])})\n",
            "(('24173', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '24173', 'pos': array([0.21590332, 0.29670258])})\n",
            "(('7895', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '7895', 'pos': array([0.17781304, 0.0435858 ])})\n",
            "(('24383', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '24383', 'pos': array([0.09900968, 0.47456153])})\n",
            "(('15822', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15822', 'pos': array([0.22011692, 0.25073748])})\n",
            "(('D02542', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.35126774, 0.44686319])})\n",
            "(('24188', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '24188', 'pos': array([0.10872288, 0.26070599])})\n",
            "(('D32961', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.00669628, 0.20803027])})\n",
            "(('D27713', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.21087378, 0.31074982])})\n",
            "(('8031', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '8031', 'pos': array([0.24584699, 0.3180532 ])})\n",
            "-------------------- \n",
            " [] \n",
            " --------------------\n",
            "-------------------- \n",
            " [] \n",
            " --------------------\n",
            "-------------------- \n",
            " [] \n",
            " --------------------\n",
            "-------------------- \n",
            " {} \n",
            " --------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#from py3plex.algorithms import *\n",
        "\n",
        "from py3plex.algorithms.network_classification import *\n",
        "from py3plex.visualization.benchmark_visualizations import *\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "## import status\n",
        "result_frames = []\n",
        "multilayer_network.basic_stats()  # check core imports\n",
        "for decomposition in multilayer_network.get_decomposition():\n",
        "\n",
        "    result_frames.append(\n",
        "        validate_label_propagation(decomposition[0],\n",
        "                                   decomposition[1],\n",
        "                                   dataset_name=\"imdb_classic\",\n",
        "                                   repetitions=5,\n",
        "                                   normalization_scheme=\"freq\"))\n",
        "\n",
        "    # results frame\n",
        "    validation_results = pd.DataFrame()\n",
        "\n",
        "# construct a single dataframe\n",
        "for x in result_frames:\n",
        "    validation_results = validation_results.append(x, ignore_index=True)\n",
        "print(validation_results)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CSOu4GTQQMky",
        "outputId": "74dbcf45-dafc-446d-8fdb-764d890d1675"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Computing core stats of the network \n",
            " --------------------\n",
            "MultiDiGraph with 367 nodes and 616 edges\n",
            "Number of unique node IDs: 367\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "     index  percent_train   micro_F   macro_F  setting       dataset      time\n",
            "0        0            0.9  0.999065  0.998910  LP_freq  imdb_classic  0.004485\n",
            "1        1            0.8  0.999533  0.999485  LP_freq  imdb_classic  0.004500\n",
            "2        2            0.7  0.997557  0.997390  LP_freq  imdb_classic  0.005336\n",
            "3        3            0.6  0.997679  0.997490  LP_freq  imdb_classic  0.005609\n",
            "4        4            0.5  0.997427  0.997250  LP_freq  imdb_classic  0.005870\n",
            "..     ...            ...       ...       ...      ...           ...       ...\n",
            "355     40            0.5  0.997427  0.997250  LP_freq  imdb_classic  0.005514\n",
            "356     41            0.4  0.998150  0.998011  LP_freq  imdb_classic  0.005065\n",
            "357     42            0.3  0.997105  0.996896  LP_freq  imdb_classic  0.005032\n",
            "358     43            0.2  0.995720  0.995404  LP_freq  imdb_classic  0.006012\n",
            "359     44            0.1  0.996206  0.995924  LP_freq  imdb_classic  0.005212\n",
            "\n",
            "[360 rows x 7 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# quick summary\n",
        "print(multilayer_network.summary())\n",
        "\n",
        "stats_frame = core_network_statistics(multilayer_network.core_network)\n",
        "print(stats_frame)\n",
        "\n",
        "top_n_by_degree = identify_n_hubs(multilayer_network.core_network, 20)\n",
        "print(top_n_by_degree)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "g_YVERbUQ4mE",
        "outputId": "f40f766d-a53f-429d-859f-27d57f22267f"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Number of layers': 5, 'Nodes': 367, 'Edges': 616, 'Mean degree': 3.3569482288828336, 'CC': 117}\n",
            "      Name classes nodes edges    degree     diameter connected components  \\\n",
            "0  example    None   367   616  3.356948  intractable                 None   \n",
            "\n",
            "  clustering coefficient   density  flow_hierarchy  flow hierarchy  \n",
            "0                   None  0.004586             NaN             0.0  \n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-32-f0506c13d6e9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstats_frame\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mtop_n_by_degree\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0midentify_n_hubs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmultilayer_network\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore_network\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtop_n_by_degree\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'identify_n_hubs' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# An example how nx functions can be used.\n",
        "\n",
        "\n",
        "# compute node centralities --- this will be applied to the network object\n",
        "centralities = multilayer_network.monoplex_nx_wrapper(\"degree_centrality\")\n",
        "\n",
        "# get top nodes by centrality\n",
        "print(sorted(centralities.items(), key=lambda x: x[1], reverse=True)[:5])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yhHLshEPRJea",
        "outputId": "368abee5-48e9-4bc7-bf14-563964b563c7"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(('C00003', 'C_level_item'), 0.644808743169399), (('C00053', 'C_level_item'), 0.08196721311475409), (('A00011', 'A_level_item'), 0.07103825136612021), (('4185', 'purchase'), 0.060109289617486336), (('C00113', 'C_level_item'), 0.04371584699453552)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from py3plex.core import multinet\n",
        "from py3plex.visualization.multilayer import plt\n",
        "import networkx as nx\n",
        "\n",
        "# An example general multilayer network\n",
        "A = multinet.multi_layer_network()\n",
        "\n",
        "B = multinet.multi_layer_network()\n",
        "\n",
        "# Edges can also be added as lists: [n1,l1,n2,l2,w]\n",
        "layer_1 = [[\"1\", \"layer1\", \"2\", \"layer1\", 0.18114714],\n",
        "           [\"1\", \"layer1\", \"4\", \"layer1\", 0.02990695],\n",
        "           [\"1\", \"layer1\", \"5\", \"layer1\", 0.03590235],\n",
        "           [\"2\", \"layer1\", \"4\", \"layer1\", 0.08797787],\n",
        "           [\"2\", \"layer1\", \"5\", \"layer1\", 0.03461894],\n",
        "           [\"3\", \"layer1\", \"4\", \"layer1\", 0.05023782],\n",
        "           [\"3\", \"layer1\", \"5\", \"layer1\", 0.14783362],\n",
        "           [\"4\", \"layer1\", \"5\", \"layer1\", 0.13015703]]\n",
        "\n",
        "layer_2 = [[\"1D\", \"layer2\", \"2D\", \"layer2\", 1],\n",
        "           [\"1D\", \"layer2\", \"3D\", \"layer2\", 2],\n",
        "           [\"1D\", \"layer2\", \"4D\", \"layer2\", 3],\n",
        "           [\"1D\", \"layer2\", \"5D\", \"layer2\", 4],\n",
        "           [\"2D\", \"layer2\", \"3D\", \"layer2\", 1],\n",
        "           [\"2D\", \"layer2\", \"4D\", \"layer2\", 2],\n",
        "           [\"2D\", \"layer2\", \"5D\", \"layer2\", 3],\n",
        "           [\"3D\", \"layer2\", \"4D\", \"layer2\", 1],\n",
        "           [\"3D\", \"layer2\", \"5D\", \"layer2\", 2],\n",
        "           [\"4D\", \"layer2\", \"5D\", \"layer2\", 1]]\n",
        "\n",
        "inter_layer_edges = [[\"1\", \"layer1\", \"1D\", \"layer2\", 1],\n",
        "                     [\"2\", \"layer1\", \"2D\", \"layer2\", 1],\n",
        "                     [\"3\", \"layer1\", \"3D\", \"layer2\", 1],\n",
        "                     [\"4\", \"layer1\", \"4D\", \"layer2\", 1],\n",
        "                     [\"5\", \"layer1\", \"5D\", \"layer2\", 1]]\n",
        "\n",
        "# specify that input is list, all else is recognized by Py3plex!\n",
        "A.add_edges(layer_1, input_type=\"list\")\n",
        "A.add_edges(layer_2, input_type=\"list\")\n",
        "A.add_edges(inter_layer_edges, input_type=\"list\")\n",
        "print(list(A.get_edges()))\n",
        "\n",
        "multilayer_network = A\n",
        "multilayer_network.visualize_network(style=\"diagonal\",\n",
        "                                     resolution=0.001,\n",
        "                                     linepoints=\"-\",\n",
        "                                     linewidth=3)\n",
        "plt.show()\n",
        "plt.clf()\n",
        "multilayer_network.visualize_network(style=\"diagonal\",\n",
        "                                     resolution=0.001,\n",
        "                                     linepoints=\"-\",\n",
        "                                     linewidth=0.2)\n",
        "plt.show()\n",
        "\n",
        "# other ad hoc options:\n",
        "# def visualize_network(self,style=\"diagonal\",parameters_layers=None,parameters_multiedges=None,show=False,compute_layouts=\"force\",layouts_parameters=None,verbose=True,orientation=\"upper\",resolution=0.01, axis = None, fig = None, no_labels = False, linewidth = 1.7, alphachannel = 0.3, linepoints = \"-.\"):\n",
        "\n",
        "A.basic_stats()\n",
        "\n",
        "centralities = A.monoplex_nx_wrapper(\"degree_centrality\")\n",
        "A.monitor(centralities)\n",
        "\n",
        "# if it's not present in networkx, you cannot use it as part of py3plex!\n",
        "G = nx.cycle_graph(4)\n",
        "sim = nx.simrank_similarity(G)\n",
        "lol = [[sim[u][v] for v in sorted(sim[u])] for u in sorted(sim)]\n",
        "\n",
        "print(\"Similarity\", lol)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "zPJWi7BXRtWe",
        "outputId": "9b60ed39-4114-4b3f-d971-c825d5f2b336"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(('1', 'layer1'), ('2', 'layer1')), (('1', 'layer1'), ('4', 'layer1')), (('1', 'layer1'), ('5', 'layer1')), (('1', 'layer1'), ('1D', 'layer2')), (('2', 'layer1'), ('4', 'layer1')), (('2', 'layer1'), ('5', 'layer1')), (('2', 'layer1'), ('2D', 'layer2')), (('4', 'layer1'), ('5', 'layer1')), (('4', 'layer1'), ('4D', 'layer2')), (('5', 'layer1'), ('5D', 'layer2')), (('3', 'layer1'), ('4', 'layer1')), (('3', 'layer1'), ('5', 'layer1')), (('3', 'layer1'), ('3D', 'layer2')), (('1D', 'layer2'), ('2D', 'layer2')), (('1D', 'layer2'), ('3D', 'layer2')), (('1D', 'layer2'), ('4D', 'layer2')), (('1D', 'layer2'), ('5D', 'layer2')), (('2D', 'layer2'), ('3D', 'layer2')), (('2D', 'layer2'), ('4D', 'layer2')), (('2D', 'layer2'), ('5D', 'layer2')), (('3D', 'layer2'), ('4D', 'layer2')), (('3D', 'layer2'), ('5D', 'layer2')), (('4D', 'layer2'), ('5D', 'layer2'))]\n",
            "-------------------- \n",
            " Network splitting in progress \n",
            " --------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 5432.05it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.01  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 6588.39it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.01  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n",
            "Finished with layout..\n",
            "MultiDiGraph with 5 nodes and 8 edges\n",
            "MultiDiGraph with 5 nodes and 10 edges\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 1/1 [00:00<00:00, 139.11it/s]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Network splitting in progress \n",
            " --------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 4827.92it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.01  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.01  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 5286.89it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.01  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.01  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n",
            "Finished with layout..\n",
            "MultiDiGraph with 5 nodes and 8 edges\n",
            "MultiDiGraph with 5 nodes and 10 edges\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 1/1 [00:00<00:00, 130.38it/s]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Computing core stats of the network \n",
            " --------------------\n",
            "MultiDiGraph with 10 nodes and 23 edges\n",
            "Number of unique node IDs: 9\n",
            "-------------------- \n",
            " {('1', 'layer1'): 0.4444444444444444, ('2', 'layer1'): 0.4444444444444444, ('4', 'layer1'): 0.5555555555555556, ('5', 'layer1'): 0.5555555555555556, ('3', 'layer1'): 0.3333333333333333, ('1D', 'layer2'): 0.5555555555555556, ('2D', 'layer2'): 0.5555555555555556, ('3D', 'layer2'): 0.5555555555555556, ('4D', 'layer2'): 0.5555555555555556, ('5D', 'layer2'): 0.5555555555555556} \n",
            " --------------------\n",
            "Similarity [[1.0, 0.0, 0.8181254024807277, 0.0], [0.0, 1.0, 0.0, 0.8181254024807277], [0.8181254024807277, 0.0, 1.0, 0.0], [0.0, 0.8181254024807277, 0.0, 1.0]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# tensor-based operations examples\n",
        "\n",
        "from py3plex.core import random_generators\n",
        "\n",
        "# initiate an instance of a random graph\n",
        "ER_multilayer = random_generators.random_multilayer_ER(500,\n",
        "                                                       8,\n",
        "                                                       0.05,\n",
        "                                                       directed=False)\n",
        "\n",
        "# some simple visualization\n",
        "visualization_params = {\"display\": True}\n",
        "ER_multilayer.visualize_matrix(visualization_params)\n",
        "\n",
        "some_nodes = [node for node in ER_multilayer.get_nodes()][0:5]\n",
        "some_edges = [node for node in ER_multilayer.get_edges()][0:5]\n",
        "\n",
        "# random node is accessed as follows\n",
        "print(ER_multilayer[some_nodes[0]])\n",
        "\n",
        "# and random edge as\n",
        "print(ER_multilayer[some_edges[0][0]][some_edges[0][1]])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        },
        "id": "AEqixsoaSCpp",
        "outputId": "a1f2380e-0a1f-449e-a4cc-3b4f0146429b"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{(3, 4): {0: {'type': 'default'}}, (5, 4): {0: {'type': 'default'}}, (12, 1): {0: {'type': 'default'}}, (27, 4): {0: {'type': 'default'}}, (66, 5): {0: {'type': 'default'}}, (70, 4): {0: {'type': 'default'}}, (132, 1): {0: {'type': 'default'}}, (142, 7): {0: {'type': 'default'}}, (161, 7): {0: {'type': 'default'}}, (186, 3): {0: {'type': 'default'}}, (192, 2): {0: {'type': 'default'}}, (203, 5): {0: {'type': 'default'}}, (240, 7): {0: {'type': 'default'}}, (264, 1): {0: {'type': 'default'}}, (279, 2): {0: {'type': 'default'}}, (287, 2): {0: {'type': 'default'}}, (301, 2): {0: {'type': 'default'}}, (321, 7): {0: {'type': 'default'}}, (342, 5): {0: {'type': 'default'}}, (356, 7): {0: {'type': 'default'}}, (359, 0): {0: {'type': 'default'}}, (383, 5): {0: {'type': 'default'}}, (384, 1): {0: {'type': 'default'}}, (395, 2): {0: {'type': 'default'}}, (398, 1): {0: {'type': 'default'}}, (481, 7): {0: {'type': 'default'}}, (492, 0): {0: {'type': 'default'}}}\n",
            "{0: {'type': 'default'}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## a simple visualization of a twitter network\n",
        "from py3plex.visualization.embedding_visualization import embedding_tools\n",
        "from py3plex.wrappers import train_node2vec_embedding\n",
        "from collections import Counter\n",
        "from py3plex.visualization.colors import colors_default\n",
        "from py3plex.visualization.multilayer import draw_multiedges, draw_multilayer_default, hairball_plot, plt\n",
        "from py3plex.core import multinet\n",
        "\n",
        "## Load the relevan layer names for later\n",
        "layer_map = {}\n",
        "with open(\"./datasets/twitterlayers.txt\") as twl:\n",
        "    for line in twl:\n",
        "        line = line.strip()\n",
        "        idx, lname = line.split()\n",
        "        layer_map[idx] = lname\n",
        "        \n",
        "## Loade the network first!\n",
        "multilayer_network = multinet.multi_layer_network(network_type = \"multiplex\").load_network(\"./datasets/test13.edges\", directed=False, input_type=\"multiplex_edges\")\n",
        "\n",
        "## Let's customize it a bit.\n",
        "network_labels, graphs, multilinks = multilayer_network.get_layers()\n",
        "print(network_labels)\n",
        "network_labels = [layer_map[k] for k in network_labels]\n",
        "draw_multilayer_default(graphs,\n",
        "                        display=False,\n",
        "                        background_shape=\"circle\",\n",
        "                        labels=network_labels,\n",
        "                        node_size=1)\n",
        "\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 496
        },
        "id": "G9sUou0UTxp0",
        "outputId": "52e2afa2-7207-46e8-80a8-8d533153ca71"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Checking multiplex edges.. \n",
            " --------------------\n",
            "-------------------- \n",
            " Network splitting in progress \n",
            " --------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:21<00:00,  4.64it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  4.98  seconds\n",
            "Repulsion forces  took  14.85  seconds\n",
            "Gravitational forces  took  0.19  seconds\n",
            "Attraction forces  took  0.69  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.43  seconds\n",
            "Finished with layout..\n",
            "('1', '2', '3')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}