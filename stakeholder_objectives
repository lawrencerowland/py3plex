{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM9204+5tmCj/l4PUxuZydd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lawrencerowland/py3plex/blob/master/stakeholder_objectives\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from py3plex.core import multinet\n",
        "from py3plex.visualization.multilayer import plt\n",
        "from py3plex.visualization.colors import all_color_names,colors_default\n",
        "import networkx as nx\n",
        "\n",
        "# An example general multilayer network\n",
        "A = multinet.multi_layer_network()\n",
        "\n",
        "\n",
        "\n",
        "# Edges can also be added as lists: [n1,l1,n2,l2,w]\n",
        "objectives = [[\"sustain_carbon\", \"objectives\", \"new_station\", \"objectives\", 10],\n",
        "          [\"sustain_carbon\", \"objectives\", \"New_construction_method\", \"objectives\", 7],\n",
        "           [\"10_new_trains\", \"objectives\", \"new_station\", \"objectives\", 5],]\n",
        "\n",
        "stakeholders = [[\"Town_council\", \"stakeholders\", \"Train_Operator\", \"stakeholders\", .4],\n",
        "           [\"Town_council\", \"stakeholders\", \"Safety_Board\", \"stakeholders\", .1],\n",
        "           [\"Safety_Board\", \"stakeholders\", \"Train_manufacturer\", \"stakeholders\", .6]]\n",
        "\n",
        "inter_layer_edges = [[\"sustain_carbon\", \"objectives\", \"Town_council\", \"stakeholders\", .6],\n",
        "                     [\"sustain_carbon\", \"objectives\", \"Train_manufacturer\", \"stakeholders\", .6],\n",
        "                     [\"10_new_trains\", \"objectives\", \"Train_manufacturer\", \"stakeholders\", 1],\n",
        "                     [\"10_new_trains\", \"objectives\", \"Safety_Board\", \"stakeholders\", .8],]\n",
        "                \n",
        "\n",
        "# specify that input is list, all else is recognized by Py3plex!\n",
        "A.add_edges(objectives, input_type=\"list\")\n",
        "A.add_edges(stakeholders, input_type=\"list\")\n",
        "A.add_edges(inter_layer_edges, input_type=\"list\")\n",
        "print(list(A.get_edges()))\n",
        "\n",
        "multilayer_network = A\n",
        "multilayer_network.visualize_network(style=\"diagonal\",\n",
        "                                     resolution=0.001,\n",
        "                                     linepoints=\"-\",\n",
        "                                     linewidth=3)\n",
        "plt.show()\n",
        "plt.clf()\n",
        "multilayer_network.visualize_network(style=\"hairball\",\n",
        "                                     resolution=10,\n",
        "                                     linepoints=\"-\",\n",
        "                                     linewidth=1.5)\n",
        "plt.show()\n",
        "\n",
        "# other ad hoc options:\n",
        "# def visualize_network(self,style=\"diagonal\",parameters_layers=None,parameters_multiedges=None,show=False,compute_layouts=\"force\",layouts_parameters=None,verbose=True,orientation=\"upper\",resolution=0.01, axis = None, fig = None, no_labels = False, linewidth = 1.7, alphachannel = 0.3, linepoints = \"-.\"):\n",
        "\n",
        "A.basic_stats()\n",
        "\n",
        "centralities = A.monoplex_nx_wrapper(\"degree_centrality\")\n",
        "A.monitor(centralities)\n",
        "\n",
        "# if it's not present in networkx, you cannot use it as part of py3plex!\n",
        "G = nx.cycle_graph(4)\n",
        "sim = nx.simrank_similarity(G)\n",
        "lol = [[sim[u][v] for v in sorted(sim[u])] for u in sorted(sim)]\n",
        "\n",
        "print(\"Similarity\", lol)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "zPJWi7BXRtWe",
        "outputId": "5fcdeb5f-265e-41a5-f416-b9f11e8e3615"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(('sustain_carbon', 'objectives'), ('new_station', 'objectives')), (('sustain_carbon', 'objectives'), ('New_construction_method', 'objectives')), (('sustain_carbon', 'objectives'), ('Town_council', 'stakeholders')), (('sustain_carbon', 'objectives'), ('Train_manufacturer', 'stakeholders')), (('10_new_trains', 'objectives'), ('new_station', 'objectives')), (('10_new_trains', 'objectives'), ('Train_manufacturer', 'stakeholders')), (('10_new_trains', 'objectives'), ('Safety_Board', 'stakeholders')), (('Town_council', 'stakeholders'), ('Train_Operator', 'stakeholders')), (('Town_council', 'stakeholders'), ('Safety_Board', 'stakeholders')), (('Safety_Board', 'stakeholders'), ('Train_manufacturer', 'stakeholders'))]\n",
            "-------------------- \n",
            " Network splitting in progress \n",
            " --------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 7928.59it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 6775.39it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n",
            "Finished with layout..\n",
            "MultiDiGraph with 4 nodes and 3 edges\n",
            "MultiDiGraph with 4 nodes and 3 edges\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 1/1 [00:00<00:00, 140.39it/s]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Network splitting in progress \n",
            " --------------------\n",
            "Beginning parsing..\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 3609.09it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.01  seconds\n",
            "Repulsion forces  took  0.01  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV0AAADnCAYAAAC9roUQAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAALwElEQVR4nO3dza8ddRnA8efMvUArJTGQShUEYiMJceHLArfGBeEfMLpRwl5XviSwMJqQqmGFkcTowgXRjQkufIkxMUSxMbLQhRhIXJBASAMp5dL60gr3jAsyZXo655yZc2d+8/b5bKz03HtPF3x5+pzfzCzyPM8DgCSyvt8AwJyILkBCoguQkOgCJCS6AAmJLkBCoguQkOgCJCS6AAmJLkBCoguQkOgCJCS6AAmJLkBCoguQkOgCJCS6AAmJLkBCoguQkOgCJCS6AAmJLkBCoguQkOgC13j6F7+OX/7qd32/jckSXeCqPM/j2Wf/EmfPPtf3W5msRZ7ned9vAhiOixcvRUTELbeciMVi0fO7mR7RBSoVaRDedlkvAJWK2JrL2iW6wFrC2z7RBTYS3naJLrCV8LZHdIFahLcdogvUJrxHJ7pAI8J7NKILNObs7u5EF9iZabc50QV2Ys2wG9EFdia8zYkucCTC24zoAkcmvPWJLtAK4a1HdIHWCO92ogu0Sng3E12gdcK7nugCnRDeaqILdGaxWESe58JbIrpAp7Ls3cwI77tEF+icifc9ogskkWWZ6IboAgkVE++ciS6QjBMNogskVoR3uVz2/E76IbpAcovFYrarBtEFejHXVYPoAr2ZY3hFF+jV3MIrukDv5hRe0QUGYS7hFV1gMOYQXtEFBmXq92kQXWBwivs0TDG8ogsM0lRvkCO6wGAtFovJXS4susBgFZcLTym8ogsM2tTu0yC6wOBN6SiZ6AKjMJXwii4wGlMIr+gCozL28IouMDpjDq/oAqM01vCKLjBaY7xPg+gCo5Zl72ZsLOEVXWD0xjTxii4wCWO5M5noApMxhjuTiS4wKUO/Qc5+328AoE3FUbLlchmXL1+JLFvEsWPHen5X7zHpApOzWCzi3LnX4uvf+HY88uiZODh4q++3dJXoApOS53kcHh7G66+fj4ODt+LNCwdxcHCx77d11SIf+tYZYINif1ucXFgsFpFlWSyXyzh79rm46aYb4/77P3V17dA30QVGY/VIWPHr4kbnQwnrJj5IAwar6txt+SkSWZaNIrRlJl1gMFaPepUf1VNOVXHp7xiZdIFerJtiy3cPK79mzKEtE10giarIroY0z/Nrpt2phLZMdIFO1Ils1eumGNoy0QVaUbWPXRfQuYW2THSBxrbtY+t8zZxCWya6wFZ1VwXbvm6uoS0TXeA6TVYFq4R2M9GFmdtlVbDtewjteqILM7MayCZT7KbvI7T1iC5MXLEqKK7s2jWyEULbBpcBw4QU/zqXbwRT/t9dv6fQtsekCyNWvp1hmzeBEdrumHSZjJdffjXyPI+7776z77fSmXIM25hi133vCKHtiugyGV/+yqOR58t48gff7futtKKNUwVNf4bQds96gcl4+OEvRJRumDK2gFRNsV38GYS2XyZdJmk1YEO80XXV0a2u3qfQDofoMnnlI1N9xXfdv2Zdvh+hHSbRZTZSxveVV16NK1f+F6dP33P1n6UIvtAOn+gyO13Etxy7f//7P/HVr30rDpeHceaxR+P220+28jPq/OwIoR06H6QxO0WUiqcU7BLf4uuWy+XVc7LFWdn9/b24884PxuXLV+LEiZu7+CMI7YiZdJm98gUG589fiOeffyHuu+/eOHXqA9f8/rrjW6vP9Mqy7LpTCG2+z4LQjpNJl9krT6lPfP/H8dJLL8ftp07G49/75jUXIGx6CkKheI0LFlhHdKFkf38/smwRN95w49bLacsTsomWuqwXIN77cO3ixUvxwov/jHs/+pG47bZbK1/bRWyFdj5El1lrepKhzavdhHaerBeYpabTalvTbcqr0Bgmky6z0ldsy88cE9p5M+kyG01WA+XY7vrXfqGliugyeU2n1eLCh11iK7RsI7pMVtNpddfLg4WWJkSXySl/WNV0lVA3mELLrkSXSelybyu0tEF0mYQm02qT2AotbRNdRq3ptFq+Kc06QkuXRJfRanOVILSkIrqMTpNTBptiK7T0QXQZjTb2tkJL30SXwdv1lEHxWqFlSNx7gUFruret+rXQMiQmXQZpl71t8foubiwObRFdBqXp3nY1zmLL0Ikug9Dk0t08z+Pw8DAiIvb29kSWURFdeldnb1u8prgDmNgyVqJLb7atEsqrg4LYMnaiS3KbjoAVK4bi98u/FlumQHRJqmqVsBracmxXXwtjJ7oksXrKYPWYVzm2bT5xF4bGxRF0qrxKKP5/RPX527YeAglDJrp0YvVR4xHrL3QQW+bEeoHWHR4eRp7nsbe3FxGxNqRtPHEXxkZ0aUVxdVhxg/AiuOvY2zJXosvOivVBOaBNbrlolcAc2enSSJNdbdXXiS1zJ7psVXW8q+56QGzhWqJLpdWjXuUjX3Ujam8L1xNdrqpaG5R/b5dH5Zhu4Vo+SJu5dZfglu2ySjDdQjWT7gzVCW1E/ac3mGyhPtGdiaoPw7a9VmyhfaI7YU1CW369D8mgO3a6E7N66qBuFB0BgzRMuhOw6dTBNva2kJZJd6Tqfhi26eub7G0jrBKgDSbdEWm6o930PextoR8m3YFb/W/iUQJobwv9E90BWncJbhvfr+7e1nQL3bBeGIijfBi26Xs6bwvDYtLtURehLdRdJdjbQlqim9hRTx1sU/cIWN3XAe0S3QQ2PW687Z9hlQDDZqfbkS5XB6s/R2xhPEy6LWr71ME2dfaxLm6AYRHdI2rzHG2Tn1lnarW3heER3R2kWh1U/dw652itEmC47HRr6vrUwbafbW8L02DS3WCXR423zd4WpkV0V/S1Oqh6H032tmIL4yC6MZzQRtjbwtTNdjwqotX1RQvbHBy8Fc8886c4d+61WC6Xked5ZFm29n3keX7NdCu4MC6zmnT7/DCs/B7Kk/VPf/Z0/OGPf47Tp++JM489sjG29rYwfpON7vP/eDGefPIn8en7PxkPPfT5q/+8KrarE2/VuqHNQx5FNPM8jzs+dCqOHbsp7vrwHVsfhS62MH6TPTL21FM/j9/89vdx/Pjx+NEPH4+9vb3rXnPUpzAcRfnChfPnL8Stt77/uvfo4gaYnslOug888Jn47+XL8YmPfyz296v/mH2uF8ohPXnytq2vAaZhspPucrkc3F/Ht60JxBamb5KT7tD+O1Inpva2MA+Tje5Q4rUtpva2MC+Ti+5Qptxt061VAszTJKPb95S7XC7XXlHmibswb5OKbvkG4n39/HXTq4sbgIgJRrevoG2abn1IBhQmE92+ptxN060PyYBVk4luRNqLHTbtZn1IBqwzieimPrFQRHVdbCOsEoBqk4lu6gdCrv48e1ugjtFHN9Uud910a28LNDGJ6HY5Xa6bbu1tgV2MOrpdT7lVKwMXNwBHMfrodhG+dVOsvS1wVKONbldTblVY7W2Btow6um1OnFXTrb0t0LZRRrftKXd1urW3Bboy2ui2EcPVSdbFDUDXRhfdtqbc1RvU+JAMSGGU0T1KGFenWx+SASmN6sGU5Uem76KYbsurBLEFUhrVpLvrlFsObIRVAtCf0UR3111ueXcrtkDfRhPdiGZrhfJ0a5UADMUoottk7Vx1DExsgaEYRXQj6k25q9NthFUCMCyDj26dKXf1g7IhPIYdoMrgy7TtA7TyVWQu3QWGbtCT7qbglkMb4eIGYBwGH92qqTXP82sudBBbYCwGG92qKbeIbURYIwCjNOjort5IfLlcRpZlYguM1iCju3oSoZhu9/b2rBKAURtsdLMsi8PDw8jzXGyByRjU39PPnXst/vq3v8fbb78d77zzTkRE7O/vCy4wGYOZdK9cuRJnvvNEvPHGm/GlL34uHnzws32/JYDWDWbSzbIsjh8/HjfecEPcfOJ9fb8dgE4M6ibmly79Ky5cOIi77rrDSgGYpEFFF2DqBrNeAJgD0QVISHQBEhJdgIREFyAh0QVISHQBEhJdgIREFyAh0QVISHQBEhJdgIREFyAh0QVISHQBEhJdgIREFyAh0QVISHQBEhJdgIREFyAh0QVISHQBEvo/j58RFjYLJFsAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Computing core stats of the network \n",
            " --------------------\n",
            "MultiDiGraph with 8 nodes and 10 edges\n",
            "Number of unique node IDs: 4\n",
            "-------------------- \n",
            " {('sustain_carbon', 'objectives'): 0.5714285714285714, ('new_station', 'objectives'): 0.2857142857142857, ('New_construction_method', 'objectives'): 0.14285714285714285, ('10_new_trains', 'objectives'): 0.42857142857142855, ('Town_council', 'stakeholders'): 0.42857142857142855, ('Train_Operator', 'stakeholders'): 0.14285714285714285, ('Safety_Board', 'stakeholders'): 0.42857142857142855, ('Train_manufacturer', 'stakeholders'): 0.42857142857142855} \n",
            " --------------------\n",
            "Similarity [[1.0, 0.0, 0.8181254024807277, 0.0], [0.0, 1.0, 0.0, 0.8181254024807277], [0.8181254024807277, 0.0, 1.0, 0.0], [0.0, 0.8181254024807277, 0.0, 1.0]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "multilayer_network = multinet.multi_layer_network().load_network(\"./datasets/ecommerce_0.gml\", directed=True, input_type=\"gml\")"
      ],
      "metadata": {
        "id": "S-55zwu7IzYZ"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "multilayer_network.basic_stats()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "Pv2U5GIlJzWV",
        "outputId": "75bf898f-2365-443a-b95d-9fb3e38c64ab"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Computing core stats of the network \n",
            " --------------------\n",
            "MultiDiGraph with 367 nodes and 616 edges\n",
            "Number of unique node IDs: 367\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "multilayer_network.visualize_network(style=\"hairball\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 434
        },
        "id": "G2J9tIugLgJn",
        "outputId": "a1056512-d1ab-4435-9683-934c381da1d9"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Network splitting in progress \n",
            " --------------------\n",
            "Beginning parsing..\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:04<00:00, 23.29it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.73  seconds\n",
            "Repulsion forces  took  3.23  seconds\n",
            "Gravitational forces  took  0.04  seconds\n",
            "Attraction forces  took  0.09  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.10  seconds\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "multilayer_network.visualize_network()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 999
        },
        "id": "bXAikRq8J7YJ",
        "outputId": "bbe0876a-089c-4d62-a172-4bce33f4aa74"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Network splitting in progress \n",
            " --------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:01<00:00, 81.74it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.18  seconds\n",
            "Repulsion forces  took  0.96  seconds\n",
            "Gravitational forces  took  0.01  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.03  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 169.06it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.09  seconds\n",
            "Repulsion forces  took  0.46  seconds\n",
            "Gravitational forces  took  0.01  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.02  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 10057.56it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 6704.56it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.01  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 49269.40it/s]\n",
            "/usr/local/lib/python3.7/dist-packages/py3plex/core/converters.py:27: RuntimeWarning: invalid value encountered in true_divide\n",
            "  np.min(coordinate_matrix[:, 0]))\n",
            "/usr/local/lib/python3.7/dist-packages/py3plex/core/converters.py:31: RuntimeWarning: invalid value encountered in true_divide\n",
            "  np.min(coordinate_matrix[:, 1]))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n",
            "Finished with layout..\n",
            "MultiDiGraph with 225 nodes and 0 edges\n",
            "MultiDiGraph with 132 nodes and 0 edges\n",
            "MultiDiGraph with 2 nodes and 0 edges\n",
            "MultiDiGraph with 7 nodes and 0 edges\n",
            "MultiDiGraph with 1 nodes and 0 edges\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 2/2 [00:00<00:00,  3.89it/s]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# visualization of a simple heterogeneous network\n",
        "from py3plex.visualization.embedding_visualization import embedding_tools\n",
        "from py3plex.wrappers import train_node2vec_embedding\n",
        "import argparse\n",
        "from collections import Counter\n",
        "from py3plex.visualization.colors import colors_default\n",
        "from py3plex.algorithms.community_detection import community_wrapper as cw\n",
        "from py3plex.visualization.multilayer import draw_multiedges, draw_multilayer_default, hairball_plot, plt\n",
        "from py3plex.core import multinet"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vpca2c0jLtMU",
        "outputId": "2e7634e7-b976-4e8e-e07e-e6cb962adf3b"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "wrappers imported\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# You can also access individual graphical elements separately!\n",
        "\n",
        "network_labels, graphs, multilinks = multilayer_network.get_layers(\n",
        ")  # get layers for visualizat# ion\n",
        "draw_multilayer_default(graphs,\n",
        "                        display=False,\n",
        "                        background_shape=\"circle\",\n",
        "                        labels=network_labels)\n",
        "\n",
        "enum = 1\n",
        "color_mappings = {idx: col for idx, col in enumerate(colors_default)}\n",
        "for edge_type, edges in multilinks.items():\n",
        "\n",
        "    #    network_list,multi_edge_tuple,input_type=\"nodes\",linepoints=\"-.\",alphachannel=0.3,linecolor=\"black\",curve_height=1,style=\"curve2_bezier\",linewidth=1,invert=False,linmod=\"both\",resolution=0.1\n",
        "    print(edge_type)\n",
        "    if edge_type == \"refers_to\":\n",
        "        draw_multiedges(graphs,\n",
        "                        edges,\n",
        "                        alphachannel=0.05,\n",
        "                        linepoints=\"--\",\n",
        "                        linecolor=\"lightblue\",\n",
        "                        curve_height=5,\n",
        "                        linmod=\"upper\",\n",
        "                        linewidth=0.4)\n",
        "    elif edge_type == \"refers_to\":\n",
        "        draw_multiedges(graphs,\n",
        "                        edges,\n",
        "                        alphachannel=0.2,\n",
        "                        linepoints=\":\",\n",
        "                        linecolor=\"green\",\n",
        "                        curve_height=5,\n",
        "                        linmod=\"upper\",\n",
        "                        linewidth=0.3)\n",
        "    elif edge_type == \"belongs_to\":\n",
        "        draw_multiedges(graphs,\n",
        "                        edges,\n",
        "                        alphachannel=0.2,\n",
        "                        linepoints=\":\",\n",
        "                        linecolor=\"red\",\n",
        "                        curve_height=5,\n",
        "                        linmod=\"upper\",\n",
        "                        linewidth=0.4)\n",
        "    elif edge_type == \"codes_for\":\n",
        "        draw_multiedges(graphs,\n",
        "                        edges,\n",
        "                        alphachannel=0.2,\n",
        "                        linepoints=\":\",\n",
        "                        linecolor=\"orange\",\n",
        "                        curve_height=5,\n",
        "                        linmod=\"upper\",\n",
        "                        linewidth=0.4)\n",
        "    else:\n",
        "        draw_multiedges(graphs,\n",
        "                        edges,\n",
        "                        alphachannel=0.2,\n",
        "                        linepoints=\"-.\",\n",
        "                        linecolor=\"black\",\n",
        "                        curve_height=5,\n",
        "                        linmod=\"both\",\n",
        "                        linewidth=0.4)\n",
        "    enum += 1\n",
        "plt.show()\n",
        "plt.clf()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 946
        },
        "id": "_kxda6b9L1OM",
        "outputId": "10877e57-7662-45f3-866e-71c9272838fe"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Network splitting in progress \n",
            " --------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:01<00:00, 82.51it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.17  seconds\n",
            "Repulsion forces  took  0.97  seconds\n",
            "Gravitational forces  took  0.01  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.03  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 164.98it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.09  seconds\n",
            "Repulsion forces  took  0.48  seconds\n",
            "Gravitational forces  took  0.01  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.02  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 19581.25it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 5692.21it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.01  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.01  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 34609.32it/s]\n",
            "/usr/local/lib/python3.7/dist-packages/py3plex/core/converters.py:27: RuntimeWarning: invalid value encountered in true_divide\n",
            "  np.min(coordinate_matrix[:, 0]))\n",
            "/usr/local/lib/python3.7/dist-packages/py3plex/core/converters.py:31: RuntimeWarning: invalid value encountered in true_divide\n",
            "  np.min(coordinate_matrix[:, 1]))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n",
            "Finished with layout..\n",
            "purchased_by\n",
            "purchased\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# entanglement: By. Benjamin Renoust and Blaz Skrlj, 2019\n",
        "# load an example multilayer network\n",
        "\n",
        "from py3plex.core import multinet\n",
        "from py3plex.algorithms.multilayer_algorithms.entanglement import compute_entanglement_analysis\n",
        "\n",
        "# visualization from a simple file\n",
        "\n",
        "analysis = compute_entanglement_analysis(multilayer_network)\n",
        "\n",
        "print(\"%d connected components of layers\" % len(analysis))\n",
        "for i, b in enumerate(analysis):\n",
        "    print('--- block %d' % i)\n",
        "    layer_labels = b['Layer entanglement'].keys()\n",
        "    print('Covering layers: %s' % layer_labels)\n",
        "\n",
        "    print('Entanglement intensity: %f' % b['Entanglement intensity'])\n",
        "    print('Layer entanglement: %s' % b['Layer entanglement'])\n",
        "    print('Entanglement homogeneity: %f' % b['Entanglement homogeneity'])\n",
        "    print('Normalized homogeneity: %f' % b['Normalized homogeneity'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "izGirXiaNpPx",
        "outputId": "069669f2-5c0b-4a3e-d17b-07040168d197"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.7.14 (default, Sep  8 2022, 00:06:44) \n",
            "[GCC 7.5.0]\n",
            "0 connected components of layers\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# A simple example for extracting different layers based on subgraphs.\n",
        "\n",
        "from py3plex.algorithms.statistics.basic_statistics import core_network_statistics\n",
        "\n",
        "names, networks, multiedges = multilayer_network.get_layers()\n",
        "\n",
        "# print some basic statistics of each network\n",
        "for name, network, multiedgelist in zip(names, networks, multiedges):\n",
        "    print(name, core_network_statistics(network))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kvg43IFSOOc0",
        "outputId": "3a98d456-feda-4140-ac20-813b4f4518f0"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Network splitting in progress \n",
            " --------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:01<00:00, 67.98it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.42  seconds\n",
            "Repulsion forces  took  0.97  seconds\n",
            "Gravitational forces  took  0.01  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.03  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 154.56it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.09  seconds\n",
            "Repulsion forces  took  0.51  seconds\n",
            "Gravitational forces  took  0.01  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.02  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 26275.16it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 6973.65it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.01  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:00<00:00, 46722.78it/s]\n",
            "/usr/local/lib/python3.7/dist-packages/py3plex/core/converters.py:27: RuntimeWarning: invalid value encountered in true_divide\n",
            "  np.min(coordinate_matrix[:, 0]))\n",
            "/usr/local/lib/python3.7/dist-packages/py3plex/core/converters.py:31: RuntimeWarning: invalid value encountered in true_divide\n",
            "  np.min(coordinate_matrix[:, 1]))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BarnesHut Approximation  took  0.00  seconds\n",
            "Repulsion forces  took  0.00  seconds\n",
            "Gravitational forces  took  0.00  seconds\n",
            "Attraction forces  took  0.00  seconds\n",
            "AdjustSpeedAndApplyForces step  took  0.00  seconds\n",
            "Finished with layout..\n",
            "purchase       Name classes nodes edges  degree     diameter connected components  \\\n",
            "0  example    None   225     0     0.0  intractable                 None   \n",
            "\n",
            "  clustering coefficient density  flow_hierarchy flow hierarchy  \n",
            "0                   None       0             NaN    intractable  \n",
            "D_level_item       Name classes nodes edges  degree     diameter connected components  \\\n",
            "0  example    None   132     0     0.0  intractable                 None   \n",
            "\n",
            "  clustering coefficient density  flow_hierarchy flow hierarchy  \n",
            "0                   None       0             NaN    intractable  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " #this example demonstrates how a network can be manipulated\n",
        "\n",
        "\n",
        "# dealing with multiplex networks\n",
        "B = multinet.multi_layer_network(network_type=\"multiplex\")\n",
        "B.add_edges(\n",
        "    [[1, 1, 2, 1, 1], [1, 2, 3, 2, 1], [1, 2, 3, 1, 1], [2, 1, 3, 2, 1]],\n",
        "    input_type=\"list\")\n",
        "\n",
        "# subset the network by layers\n",
        "C = B.subnetwork([2], subset_by=\"layers\")\n",
        "print(list(C.get_nodes()))\n",
        "\n",
        "C = B.subnetwork([2], subset_by=\"node_names\")\n",
        "print(list(C.get_nodes()))\n",
        "\n",
        "C = B.subnetwork([(1, 1), (1, 2)], subset_by=\"node_layer_names\")\n",
        "print(list(C.get_nodes()))\n",
        "\n",
        "# coupled edges\n",
        "B.monitor(list(B.get_edges(multiplex_edges=True)))\n",
        "\n",
        "# non-coupled edges\n",
        "B.monitor(list(B.get_edges(multiplex_edges=False)))\n",
        "\n",
        "# visualize this toy example\n",
        "# B.visualize_network(show=True,resolution=0.01)\n",
        "\n",
        "# nodes can also be removed easily\n",
        "B.remove_edges(\n",
        "    [[1, 1, 2, 1, 1], [1, 2, 3, 2, 1], [1, 2, 3, 1, 1], [2, 1, 3, 2, 1]],\n",
        "    input_type=\"list\")\n",
        "print(list(B.get_edges()))\n",
        "\n",
        "B.remove_nodes([(1, 1), (3, 1)], input_type=\"list\")\n",
        "print(list(B.get_nodes()))\n",
        "\n",
        "B.remove_nodes({\"source\":2,\"type\":1}, input_type=\"dict\")\n",
        "print(list(B.get_nodes()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qc07iRp7Ovbo",
        "outputId": "79a1ef3e-1ecf-41d2-ca6c-2a12f05048f6"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(1, 2), (3, 2)]\n",
            "[(2, 1)]\n",
            "[(1, 2), (1, 1)]\n",
            "-------------------- \n",
            " [((1, 1), (2, 1)), ((2, 1), (3, 2)), ((1, 2), (3, 2)), ((1, 2), (3, 1))] \n",
            " --------------------\n",
            "-------------------- \n",
            " [((1, 1), (2, 1), 0), ((2, 1), (3, 2), 0), ((1, 2), (3, 2), 0), ((1, 2), (3, 1), 0)] \n",
            " --------------------\n",
            "[]\n",
            "[(2, 1), (1, 2), (3, 2)]\n",
            "[(1, 2), (3, 2)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "A = multilayer_network\n",
        "\n",
        "\n",
        "# this is nicer printing.\n",
        "A.monitor(\"Edge looping:\")\n",
        "\n",
        "# looping through edges:\n",
        "for edge in A.get_edges(data=True):\n",
        "    print(edge)\n",
        "\n",
        "A.monitor(\"Node looping:\")\n",
        "\n",
        "# what about nodes?\n",
        "for node in A.get_nodes(data=True):\n",
        "    print(node)\n",
        "\n",
        "C1 = A.subnetwork(['1'], subset_by=\"layers\")\n",
        "A.monitor(list(C1.get_nodes()))\n",
        "\n",
        "C2 = A.subnetwork(['1'], subset_by=\"node_names\")\n",
        "A.monitor(list(C2.get_nodes()))\n",
        "\n",
        "C3 = A.subnetwork([('1', '1'), ('2', '1')], subset_by=\"node_layer_names\")\n",
        "A.monitor(list(C3.get_nodes()))\n",
        "\n",
        "centralities = C1.monoplex_nx_wrapper(\"degree_centrality\")\n",
        "A.monitor(centralities)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GR-2r5z6Py6M",
        "outputId": "ec73376a-6c18-4716-d6bc-451d4a19a8b0"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Edge looping: \n",
            " --------------------\n",
            "(('16417', 'purchase'), ('D14973', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D14973', 'D_level_item'), ('16417', 'purchase'), {'type': 'purchased'})\n",
            "(('D11300', 'D_level_item'), ('21544', 'purchase'), {'type': 'purchased'})\n",
            "(('21544', 'purchase'), ('D11300', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('B00058', 'B_level_item'), ('5029', 'purchase'), {'type': 'purchased'})\n",
            "(('B00058', 'B_level_item'), ('5029', 'purchase'), {'type': 'purchased'})\n",
            "(('B00058', 'B_level_item'), ('5029', 'purchase'), {'type': 'purchased'})\n",
            "(('B00058', 'B_level_item'), ('23842', 'purchase'), {'type': 'purchased'})\n",
            "(('B00058', 'B_level_item'), ('23842', 'purchase'), {'type': 'purchased'})\n",
            "(('5029', 'purchase'), ('B00058', 'B_level_item'), {'type': 'purchased_by'})\n",
            "(('5029', 'purchase'), ('B00058', 'B_level_item'), {'type': 'purchased_by'})\n",
            "(('5029', 'purchase'), ('B00058', 'B_level_item'), {'type': 'purchased_by'})\n",
            "(('23842', 'purchase'), ('B00058', 'B_level_item'), {'type': 'purchased_by'})\n",
            "(('23842', 'purchase'), ('B00058', 'B_level_item'), {'type': 'purchased_by'})\n",
            "(('8291', 'purchase'), ('D11949', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('8291', 'purchase'), ('D11945', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D11949', 'D_level_item'), ('8291', 'purchase'), {'type': 'purchased'})\n",
            "(('D11945', 'D_level_item'), ('8291', 'purchase'), {'type': 'purchased'})\n",
            "(('D25899', 'D_level_item'), ('1131', 'purchase'), {'type': 'purchased'})\n",
            "(('D25899', 'D_level_item'), ('1511', 'purchase'), {'type': 'purchased'})\n",
            "(('1131', 'purchase'), ('D25899', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('1511', 'purchase'), ('D25899', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('16495', 'purchase'), ('D04248', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D04248', 'D_level_item'), ('16495', 'purchase'), {'type': 'purchased'})\n",
            "(('D14034', 'D_level_item'), ('16775', 'purchase'), {'type': 'purchased'})\n",
            "(('16775', 'purchase'), ('D14034', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('8337', 'purchase'), ('D06344', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D06344', 'D_level_item'), ('8337', 'purchase'), {'type': 'purchased'})\n",
            "(('D06344', 'D_level_item'), ('8394', 'purchase'), {'type': 'purchased'})\n",
            "(('D06344', 'D_level_item'), ('16161', 'purchase'), {'type': 'purchased'})\n",
            "(('24723', 'purchase'), ('D15201', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D15201', 'D_level_item'), ('24723', 'purchase'), {'type': 'purchased'})\n",
            "(('D15776', 'D_level_item'), ('4493', 'purchase'), {'type': 'purchased'})\n",
            "(('4493', 'purchase'), ('D15776', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('4493', 'purchase'), ('D15774', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D15580', 'D_level_item'), ('9738', 'purchase'), {'type': 'purchased'})\n",
            "(('9738', 'purchase'), ('D15580', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('8374', 'purchase'), ('D23691', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D23691', 'D_level_item'), ('8374', 'purchase'), {'type': 'purchased'})\n",
            "(('16575', 'purchase'), ('D33619', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D33619', 'D_level_item'), ('16575', 'purchase'), {'type': 'purchased'})\n",
            "(('8394', 'purchase'), ('D06344', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D04291', 'D_level_item'), ('4804', 'purchase'), {'type': 'purchased'})\n",
            "(('4804', 'purchase'), ('D04291', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('4804', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D00124', 'D_level_item'), ('15659', 'purchase'), {'type': 'purchased'})\n",
            "(('15659', 'purchase'), ('D00124', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('16625', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('C00053', 'C_level_item'), ('16625', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('9453', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('9827', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('9827', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('9827', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('9827', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('1775', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('11733', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('3610', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('20142', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('4804', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('4852', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('5847', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('22512', 'purchase'), {'type': 'purchased'})\n",
            "(('C00053', 'C_level_item'), ('15394', 'purchase'), {'type': 'purchased'})\n",
            "(('16629', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('C00003', 'C_level_item'), ('16629', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('16664', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('25216', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('25216', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('8908', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('8908', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('25372', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('823', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('17332', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('17416', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('17487', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('17487', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('9316', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('17666', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('17666', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('9719', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('9719', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('9866', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('1739', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18186', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10076', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10076', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10076', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10076', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10076', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10076', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18280', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18280', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18581', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10548', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10554', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10561', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18760', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18796', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('18796', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10613', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10613', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('2533', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10812', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('10812', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27370', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27496', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27495', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27495', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27495', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27535', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27535', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11151', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3129', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3247', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3260', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3393', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3393', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('27987', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('19817', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3500', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('28077', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11875', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11875', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11875', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3723', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('28311', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3735', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('3746', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11974', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11974', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('11974', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('28728', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('28728', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('4185', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('28765', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('28766', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('12481', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('12481', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('12481', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('20930', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('21276', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('21628', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('5291', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('5300', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('5319', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('5341', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('5355', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('13684', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('6006', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14240', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14240', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14240', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14240', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('6211', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14691', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14830', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('23032', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('23032', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('23032', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('14913', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('6871', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('23740', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('7448', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('7448', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('15706', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('15773', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('15949', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('15949', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('24173', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('7895', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('24383', 'purchase'), {'type': 'purchased'})\n",
            "(('C00003', 'C_level_item'), ('24383', 'purchase'), {'type': 'purchased'})\n",
            "(('255', 'purchase'), ('D03133', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D03133', 'D_level_item'), ('255', 'purchase'), {'type': 'purchased'})\n",
            "(('8467', 'purchase'), ('D16621', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D16621', 'D_level_item'), ('8467', 'purchase'), {'type': 'purchased'})\n",
            "(('16664', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D13441', 'D_level_item'), ('23089', 'purchase'), {'type': 'purchased'})\n",
            "(('23089', 'purchase'), ('D13441', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D29774', 'D_level_item'), ('2539', 'purchase'), {'type': 'purchased'})\n",
            "(('2539', 'purchase'), ('D29774', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('25042', 'purchase'), ('D11862', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D11862', 'D_level_item'), ('25042', 'purchase'), {'type': 'purchased'})\n",
            "(('8701', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('A00011', 'A_level_item'), ('8701', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('8759', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('2368', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('19892', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('29357', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('4962', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('A00011', 'A_level_item'), ('13668', 'purchase'), {'type': 'purchased'})\n",
            "(('D02396', 'D_level_item'), ('3644', 'purchase'), {'type': 'purchased'})\n",
            "(('3644', 'purchase'), ('D02396', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('3644', 'purchase'), ('D02390', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('8753', 'purchase'), ('D12902', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D12902', 'D_level_item'), ('8753', 'purchase'), {'type': 'purchased'})\n",
            "(('8759', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('8799', 'purchase'), ('D29015', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D29015', 'D_level_item'), ('8799', 'purchase'), {'type': 'purchased'})\n",
            "(('25216', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('25216', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('675', 'purchase'), ('D01120', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D01120', 'D_level_item'), ('675', 'purchase'), {'type': 'purchased'})\n",
            "(('8867', 'purchase'), ('D13019', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D13019', 'D_level_item'), ('8867', 'purchase'), {'type': 'purchased'})\n",
            "(('686', 'purchase'), ('D13744', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D13744', 'D_level_item'), ('686', 'purchase'), {'type': 'purchased'})\n",
            "(('17080', 'purchase'), ('D34003', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D34003', 'D_level_item'), ('17080', 'purchase'), {'type': 'purchased'})\n",
            "(('8908', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('8908', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('25294', 'purchase'), ('D25484', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D25484', 'D_level_item'), ('25294', 'purchase'), {'type': 'purchased'})\n",
            "(('17104', 'purchase'), ('D20276', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D20276', 'D_level_item'), ('17104', 'purchase'), {'type': 'purchased'})\n",
            "(('D20276', 'D_level_item'), ('10199', 'purchase'), {'type': 'purchased'})\n",
            "(('767', 'purchase'), ('D07812', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D07812', 'D_level_item'), ('767', 'purchase'), {'type': 'purchased'})\n",
            "(('25354', 'purchase'), ('D17306', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D17306', 'D_level_item'), ('25354', 'purchase'), {'type': 'purchased'})\n",
            "(('25372', 'purchase'), ('D31646', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('25372', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('25372', 'purchase'), ('D35568', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D31646', 'D_level_item'), ('25372', 'purchase'), {'type': 'purchased'})\n",
            "(('D35568', 'D_level_item'), ('25372', 'purchase'), {'type': 'purchased'})\n",
            "(('D34290', 'D_level_item'), ('22689', 'purchase'), {'type': 'purchased'})\n",
            "(('22689', 'purchase'), ('D34290', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('823', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('848', 'purchase'), ('D05074', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D05074', 'D_level_item'), ('848', 'purchase'), {'type': 'purchased'})\n",
            "(('25447', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('C00113', 'C_level_item'), ('25447', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('26283', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('10023', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('18228', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('19702', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('22104', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('22104', 'purchase'), {'type': 'purchased'})\n",
            "(('C00113', 'C_level_item'), ('22104', 'purchase'), {'type': 'purchased'})\n",
            "(('17332', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D34569', 'D_level_item'), ('14913', 'purchase'), {'type': 'purchased'})\n",
            "(('14913', 'purchase'), ('D34569', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('14913', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('17356', 'purchase'), ('D01030', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D01030', 'D_level_item'), ('17356', 'purchase'), {'type': 'purchased'})\n",
            "(('D20193', 'D_level_item'), ('22932', 'purchase'), {'type': 'purchased'})\n",
            "(('22932', 'purchase'), ('D20193', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('17416', 'purchase'), ('D01152', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('17416', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D01152', 'D_level_item'), ('17416', 'purchase'), {'type': 'purchased'})\n",
            "(('9233', 'purchase'), ('D14305', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D14305', 'D_level_item'), ('9233', 'purchase'), {'type': 'purchased'})\n",
            "(('9241', 'purchase'), ('C00138', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('C00138', 'C_level_item'), ('9241', 'purchase'), {'type': 'purchased'})\n",
            "(('9246', 'purchase'), ('D14365', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D14365', 'D_level_item'), ('9246', 'purchase'), {'type': 'purchased'})\n",
            "(('D16589', 'D_level_item'), ('9653', 'purchase'), {'type': 'purchased'})\n",
            "(('9653', 'purchase'), ('D16589', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('9284', 'purchase'), ('D25734', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D25734', 'D_level_item'), ('9284', 'purchase'), {'type': 'purchased'})\n",
            "(('17487', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('17487', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9316', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9370', 'purchase'), ('C00054', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('C00054', 'C_level_item'), ('9370', 'purchase'), {'type': 'purchased'})\n",
            "(('C00054', 'C_level_item'), ('3087', 'purchase'), {'type': 'purchased'})\n",
            "(('C00054', 'C_level_item'), ('5848', 'purchase'), {'type': 'purchased'})\n",
            "(('1180', 'purchase'), ('D16559', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D16559', 'D_level_item'), ('1180', 'purchase'), {'type': 'purchased'})\n",
            "(('17632', 'purchase'), ('D05303', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('17632', 'purchase'), ('B00072', 'B_level_item'), {'type': 'purchased_by'})\n",
            "(('D05303', 'D_level_item'), ('17632', 'purchase'), {'type': 'purchased'})\n",
            "(('B00072', 'B_level_item'), ('17632', 'purchase'), {'type': 'purchased'})\n",
            "(('9453', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('17666', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('17666', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D00064', 'D_level_item'), ('19806', 'purchase'), {'type': 'purchased'})\n",
            "(('19806', 'purchase'), ('D00064', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('19806', 'purchase'), ('D01252', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('25903', 'purchase'), ('D18127', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D18127', 'D_level_item'), ('25903', 'purchase'), {'type': 'purchased'})\n",
            "(('D02908', 'D_level_item'), ('27719', 'purchase'), {'type': 'purchased'})\n",
            "(('27719', 'purchase'), ('D02908', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D29979', 'D_level_item'), ('26337', 'purchase'), {'type': 'purchased'})\n",
            "(('26337', 'purchase'), ('D29979', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('26337', 'purchase'), ('D29948', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('26337', 'purchase'), ('D29963', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D14748', 'D_level_item'), ('19470', 'purchase'), {'type': 'purchased'})\n",
            "(('19470', 'purchase'), ('D14748', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('1515', 'purchase'), ('D00509', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D00509', 'D_level_item'), ('1515', 'purchase'), {'type': 'purchased'})\n",
            "(('9719', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9719', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D00308', 'D_level_item'), ('18581', 'purchase'), {'type': 'purchased'})\n",
            "(('18581', 'purchase'), ('D00308', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('18581', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9827', 'purchase'), ('D02470', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('9827', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9827', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9827', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('9827', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D02470', 'D_level_item'), ('9827', 'purchase'), {'type': 'purchased'})\n",
            "(('D12634', 'D_level_item'), ('23816', 'purchase'), {'type': 'purchased'})\n",
            "(('23816', 'purchase'), ('D12634', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('9866', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('26283', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D19500', 'D_level_item'), ('18796', 'purchase'), {'type': 'purchased'})\n",
            "(('18796', 'purchase'), ('D19500', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('18796', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('18796', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('1739', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D29948', 'D_level_item'), ('26337', 'purchase'), {'type': 'purchased'})\n",
            "(('D29948', 'D_level_item'), ('27316', 'purchase'), {'type': 'purchased'})\n",
            "(('D29963', 'D_level_item'), ('26337', 'purchase'), {'type': 'purchased'})\n",
            "(('1775', 'purchase'), ('D12319', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('1775', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D12319', 'D_level_item'), ('1775', 'purchase'), {'type': 'purchased'})\n",
            "(('9987', 'purchase'), ('D07360', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D07360', 'D_level_item'), ('9987', 'purchase'), {'type': 'purchased'})\n",
            "(('D07360', 'D_level_item'), ('21091', 'purchase'), {'type': 'purchased'})\n",
            "(('D05440', 'D_level_item'), ('22317', 'purchase'), {'type': 'purchased'})\n",
            "(('22317', 'purchase'), ('D05440', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('18186', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10023', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('18228', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10076', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10076', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10076', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10076', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10076', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10076', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('18280', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('18280', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10088', 'purchase'), ('D16573', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D16573', 'D_level_item'), ('10088', 'purchase'), {'type': 'purchased'})\n",
            "(('D26612', 'D_level_item'), ('11535', 'purchase'), {'type': 'purchased'})\n",
            "(('11535', 'purchase'), ('D26612', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D28582', 'D_level_item'), ('12974', 'purchase'), {'type': 'purchased'})\n",
            "(('12974', 'purchase'), ('D28582', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('10199', 'purchase'), ('D20276', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D08650', 'D_level_item'), ('7013', 'purchase'), {'type': 'purchased'})\n",
            "(('7013', 'purchase'), ('D08650', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('26634', 'purchase'), ('D25325', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D25325', 'D_level_item'), ('26634', 'purchase'), {'type': 'purchased'})\n",
            "(('10260', 'purchase'), ('D16002', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D16002', 'D_level_item'), ('10260', 'purchase'), {'type': 'purchased'})\n",
            "(('D17702', 'D_level_item'), ('24000', 'purchase'), {'type': 'purchased'})\n",
            "(('24000', 'purchase'), ('D17702', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('24000', 'purchase'), ('D05692', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('3087', 'purchase'), ('C00054', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('3087', 'purchase'), ('D02670', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('5848', 'purchase'), ('C00054', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('2165', 'purchase'), ('D06578', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D06578', 'D_level_item'), ('2165', 'purchase'), {'type': 'purchased'})\n",
            "(('D06578', 'D_level_item'), ('20817', 'purchase'), {'type': 'purchased'})\n",
            "(('2169', 'purchase'), ('D06447', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D06447', 'D_level_item'), ('2169', 'purchase'), {'type': 'purchased'})\n",
            "(('26790', 'purchase'), ('D19890', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D19890', 'D_level_item'), ('26790', 'purchase'), {'type': 'purchased'})\n",
            "(('18703', 'purchase'), ('D02895', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D02895', 'D_level_item'), ('18703', 'purchase'), {'type': 'purchased'})\n",
            "(('D35650', 'D_level_item'), ('28880', 'purchase'), {'type': 'purchased'})\n",
            "(('28880', 'purchase'), ('D35650', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('10548', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('26934', 'purchase'), ('D11126', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D11126', 'D_level_item'), ('26934', 'purchase'), {'type': 'purchased'})\n",
            "(('10554', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('2368', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('10561', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('18760', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10613', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10613', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10671', 'purchase'), ('D19482', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D19482', 'D_level_item'), ('10671', 'purchase'), {'type': 'purchased'})\n",
            "(('2499', 'purchase'), ('D01508', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D01508', 'D_level_item'), ('2499', 'purchase'), {'type': 'purchased'})\n",
            "(('D10503', 'D_level_item'), ('7589', 'purchase'), {'type': 'purchased'})\n",
            "(('7589', 'purchase'), ('D10503', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('2533', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D05692', 'D_level_item'), ('24000', 'purchase'), {'type': 'purchased'})\n",
            "(('D04255', 'D_level_item'), ('6926', 'purchase'), {'type': 'purchased'})\n",
            "(('6926', 'purchase'), ('D04255', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('18950', 'purchase'), ('D21119', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D21119', 'D_level_item'), ('18950', 'purchase'), {'type': 'purchased'})\n",
            "(('10812', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('10812', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('21091', 'purchase'), ('D07360', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('C00418', 'C_level_item'), ('12980', 'purchase'), {'type': 'purchased'})\n",
            "(('12980', 'purchase'), ('C00418', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D30187', 'D_level_item'), ('29221', 'purchase'), {'type': 'purchased'})\n",
            "(('29221', 'purchase'), ('D30187', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('29221', 'purchase'), ('D14475', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D07251', 'D_level_item'), ('23740', 'purchase'), {'type': 'purchased'})\n",
            "(('D07251', 'D_level_item'), ('7448', 'purchase'), {'type': 'purchased'})\n",
            "(('23740', 'purchase'), ('D07251', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('23740', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('7448', 'purchase'), ('D07251', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('7448', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('7448', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('19082', 'purchase'), ('D21826', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D21826', 'D_level_item'), ('19082', 'purchase'), {'type': 'purchased'})\n",
            "(('27316', 'purchase'), ('D29948', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('27370', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11006', 'purchase'), ('D18788', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D18788', 'D_level_item'), ('11006', 'purchase'), {'type': 'purchased'})\n",
            "(('D03816', 'D_level_item'), ('19603', 'purchase'), {'type': 'purchased'})\n",
            "(('19603', 'purchase'), ('D03816', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('27423', 'purchase'), ('D13673', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D13673', 'D_level_item'), ('27423', 'purchase'), {'type': 'purchased'})\n",
            "(('D08986', 'D_level_item'), ('2951', 'purchase'), {'type': 'purchased'})\n",
            "(('2951', 'purchase'), ('D08986', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('11093', 'purchase'), ('D25172', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D25172', 'D_level_item'), ('11093', 'purchase'), {'type': 'purchased'})\n",
            "(('27496', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('27495', 'purchase'), ('D05655', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('27495', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('27495', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('27495', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D05655', 'D_level_item'), ('27495', 'purchase'), {'type': 'purchased'})\n",
            "(('11137', 'purchase'), ('D21354', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D21354', 'D_level_item'), ('11137', 'purchase'), {'type': 'purchased'})\n",
            "(('27535', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('27535', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11151', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11194', 'purchase'), ('C00273', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('C00273', 'C_level_item'), ('11194', 'purchase'), {'type': 'purchased'})\n",
            "(('D02670', 'D_level_item'), ('3087', 'purchase'), {'type': 'purchased'})\n",
            "(('11294', 'purchase'), ('D20870', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('11294', 'purchase'), ('D19225', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D20870', 'D_level_item'), ('11294', 'purchase'), {'type': 'purchased'})\n",
            "(('D20870', 'D_level_item'), ('11296', 'purchase'), {'type': 'purchased'})\n",
            "(('D19225', 'D_level_item'), ('11294', 'purchase'), {'type': 'purchased'})\n",
            "(('11296', 'purchase'), ('D20870', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('3110', 'purchase'), ('D01807', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D01807', 'D_level_item'), ('3110', 'purchase'), {'type': 'purchased'})\n",
            "(('3129', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D29020', 'D_level_item'), ('28103', 'purchase'), {'type': 'purchased'})\n",
            "(('28103', 'purchase'), ('D29020', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D06931', 'D_level_item'), ('5960', 'purchase'), {'type': 'purchased'})\n",
            "(('5960', 'purchase'), ('D06931', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('3247', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('3260', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('19702', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('22104', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('22104', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('22104', 'purchase'), ('C00113', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('19687', 'purchase'), ('D15209', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D15209', 'D_level_item'), ('19687', 'purchase'), {'type': 'purchased'})\n",
            "(('D04717', 'D_level_item'), ('19987', 'purchase'), {'type': 'purchased'})\n",
            "(('19987', 'purchase'), ('D04717', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('11563', 'purchase'), ('D28464', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D28464', 'D_level_item'), ('11563', 'purchase'), {'type': 'purchased'})\n",
            "(('3393', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('3393', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('27987', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D01252', 'D_level_item'), ('19806', 'purchase'), {'type': 'purchased'})\n",
            "(('D01252', 'D_level_item'), ('15754', 'purchase'), {'type': 'purchased'})\n",
            "(('19817', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D21744', 'D_level_item'), ('7960', 'purchase'), {'type': 'purchased'})\n",
            "(('7960', 'purchase'), ('D21744', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('3500', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('28077', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D22725', 'D_level_item'), ('12615', 'purchase'), {'type': 'purchased'})\n",
            "(('12615', 'purchase'), ('D22725', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('19892', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('D26502', 'D_level_item'), ('28598', 'purchase'), {'type': 'purchased'})\n",
            "(('28598', 'purchase'), ('D26502', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('28598', 'purchase'), ('D26519', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('11733', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D01200', 'D_level_item'), ('16324', 'purchase'), {'type': 'purchased'})\n",
            "(('16324', 'purchase'), ('D01200', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('28129', 'purchase'), ('D24541', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D24541', 'D_level_item'), ('28129', 'purchase'), {'type': 'purchased'})\n",
            "(('3610', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D20207', 'D_level_item'), ('11875', 'purchase'), {'type': 'purchased'})\n",
            "(('11875', 'purchase'), ('D20207', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('11875', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11875', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11875', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D02390', 'D_level_item'), ('3644', 'purchase'), {'type': 'purchased'})\n",
            "(('16161', 'purchase'), ('D06344', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('3723', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('28311', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('3735', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('3746', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('20142', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11974', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11974', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('11974', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('3836', 'purchase'), ('D10791', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D10791', 'D_level_item'), ('3836', 'purchase'), {'type': 'purchased'})\n",
            "(('20334', 'purchase'), ('D12877', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D12877', 'D_level_item'), ('20334', 'purchase'), {'type': 'purchased'})\n",
            "(('D26519', 'D_level_item'), ('28598', 'purchase'), {'type': 'purchased'})\n",
            "(('D15639', 'D_level_item'), ('29816', 'purchase'), {'type': 'purchased'})\n",
            "(('29816', 'purchase'), ('D15639', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D04798', 'D_level_item'), ('5259', 'purchase'), {'type': 'purchased'})\n",
            "(('5259', 'purchase'), ('D04798', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('28728', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('28728', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4152', 'purchase'), ('D27160', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D27160', 'D_level_item'), ('4152', 'purchase'), {'type': 'purchased'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4185', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('28765', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('28766', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('12481', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('12481', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('12481', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4314', 'purchase'), ('D24092', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D24092', 'D_level_item'), ('4314', 'purchase'), {'type': 'purchased'})\n",
            "(('4363', 'purchase'), ('D02624', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D02624', 'D_level_item'), ('4363', 'purchase'), {'type': 'purchased'})\n",
            "(('20817', 'purchase'), ('D06578', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D15774', 'D_level_item'), ('4493', 'purchase'), {'type': 'purchased'})\n",
            "(('20895', 'purchase'), ('D06106', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D06106', 'D_level_item'), ('20895', 'purchase'), {'type': 'purchased'})\n",
            "(('12729', 'purchase'), ('D22137', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D22137', 'D_level_item'), ('12729', 'purchase'), {'type': 'purchased'})\n",
            "(('20930', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('20930', 'purchase'), ('D06630', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D06630', 'D_level_item'), ('20930', 'purchase'), {'type': 'purchased'})\n",
            "(('D14475', 'D_level_item'), ('29221', 'purchase'), {'type': 'purchased'})\n",
            "(('D30760', 'D_level_item'), ('29307', 'purchase'), {'type': 'purchased'})\n",
            "(('29307', 'purchase'), ('D30760', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('29327', 'purchase'), ('D30848', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D30848', 'D_level_item'), ('29327', 'purchase'), {'type': 'purchased'})\n",
            "(('29357', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('4852', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('21276', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('4962', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('5066', 'purchase'), ('D25861', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D25861', 'D_level_item'), ('5066', 'purchase'), {'type': 'purchased'})\n",
            "(('D16403', 'D_level_item'), ('5483', 'purchase'), {'type': 'purchased'})\n",
            "(('5483', 'purchase'), ('D16403', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('21628', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('5291', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('5300', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('5319', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('13519', 'purchase'), ('D32926', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D32926', 'D_level_item'), ('13519', 'purchase'), {'type': 'purchased'})\n",
            "(('5341', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('5355', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13668', 'purchase'), ('A00011', 'A_level_item'), {'type': 'purchased_by'})\n",
            "(('13684', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D33797', 'D_level_item'), ('14476', 'purchase'), {'type': 'purchased'})\n",
            "(('14476', 'purchase'), ('D33797', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('5847', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('6006', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('14240', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('14240', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('14240', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('14240', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('22512', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('D18293', 'D_level_item'), ('23276', 'purchase'), {'type': 'purchased'})\n",
            "(('23276', 'purchase'), ('D18293', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('6211', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('22757', 'purchase'), ('D10783', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D10783', 'D_level_item'), ('22757', 'purchase'), {'type': 'purchased'})\n",
            "(('15754', 'purchase'), ('D01252', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('15394', 'purchase'), ('C00053', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('14691', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('14830', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('23032', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('23032', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('23032', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('6871', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('23585', 'purchase'), ('D15125', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D15125', 'D_level_item'), ('23585', 'purchase'), {'type': 'purchased'})\n",
            "(('23603', 'purchase'), ('D12066', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D12066', 'D_level_item'), ('23603', 'purchase'), {'type': 'purchased'})\n",
            "(('15706', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('15773', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('15949', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('15949', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('24173', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('7895', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('24383', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('24383', 'purchase'), ('C00003', 'C_level_item'), {'type': 'purchased_by'})\n",
            "(('15822', 'purchase'), ('D02542', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D02542', 'D_level_item'), ('15822', 'purchase'), {'type': 'purchased'})\n",
            "(('24188', 'purchase'), ('D32961', 'D_level_item'), {'type': 'purchased_by'})\n",
            "(('D32961', 'D_level_item'), ('24188', 'purchase'), {'type': 'purchased'})\n",
            "(('D27713', 'D_level_item'), ('8031', 'purchase'), {'type': 'purchased'})\n",
            "(('8031', 'purchase'), ('D27713', 'D_level_item'), {'type': 'purchased_by'})\n",
            "-------------------- \n",
            " Node looping: \n",
            " --------------------\n",
            "(('16417', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16417', 'pos': array([0.2771711 , 0.39107024])})\n",
            "(('D14973', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.13133022, 0.30394729])})\n",
            "(('D11300', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.11356044, 0.34829266])})\n",
            "(('21544', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '21544', 'pos': array([0.13431597, 0.44284929])})\n",
            "(('B00058', 'B_level_item'), {'type': 'B_level_item', 'pos': array([0.5, 0. ])})\n",
            "(('5029', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5029', 'pos': array([0.18738078, 0.32339188])})\n",
            "(('23842', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23842', 'pos': array([0.18237773, 0.09067859])})\n",
            "(('8291', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8291', 'pos': array([0.12516496, 0.34982232])})\n",
            "(('D11949', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.5       , 0.26628115])})\n",
            "(('D11945', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25419922, 0.27668375])})\n",
            "(('D25899', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.21397638, 0.17933858])})\n",
            "(('1131', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '1131', 'pos': array([0.11508489, 0.12813445])})\n",
            "(('1511', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '1511', 'pos': array([0.08948503, 0.32133616])})\n",
            "(('16495', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16495', 'pos': array([0.21323822, 0.39445249])})\n",
            "(('D04248', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.30849965, 0.31639052])})\n",
            "(('D14034', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.098889  , 0.13573437])})\n",
            "(('16775', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16775', 'pos': array([0.24584435, 0.16796049])})\n",
            "(('8337', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '8337', 'pos': array([0.25367442, 0.23622027])})\n",
            "(('D06344', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.33945824, 0.1183269 ])})\n",
            "(('24723', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '24723', 'pos': array([0.11821767, 0.16689848])})\n",
            "(('D15201', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.40537079, 0.17750266])})\n",
            "(('D15776', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.46102273, 0.34302751])})\n",
            "(('4493', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '4493', 'pos': array([0.25361949, 0.25870355])})\n",
            "(('D15580', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.29627449, 0.03180114])})\n",
            "(('9738', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9738', 'pos': array([0.21678937, 0.36120035])})\n",
            "(('8374', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '8374', 'pos': array([0.16750151, 0.48424471])})\n",
            "(('D23691', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.29082841, 0.26324598])})\n",
            "(('16575', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16575', 'pos': array([0.17845728, 0.29062496])})\n",
            "(('D33619', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.16869121, 0.04199781])})\n",
            "(('8394', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8394', 'pos': array([0.45960169, 0.23153058])})\n",
            "(('D04291', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.09662359, 0.29416957])})\n",
            "(('4804', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '4804', 'pos': array([0.08385647, 0.34673305])})\n",
            "(('D00124', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.1692662 , 0.16160184])})\n",
            "(('15659', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15659', 'pos': array([0.13444028, 0.25648261])})\n",
            "(('16625', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16625', 'pos': array([0.22958599, 0.27974977])})\n",
            "(('C00053', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.25666599, 0.        ])})\n",
            "(('16629', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16629', 'pos': array([0.23927538, 0.25273844])})\n",
            "(('C00003', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.45287308, 0.3621064 ])})\n",
            "(('255', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '255', 'pos': array([0.21502037, 0.2807297 ])})\n",
            "(('D03133', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.28981679, 0.07932703])})\n",
            "(('8467', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8467', 'pos': array([0.27506986, 0.13555987])})\n",
            "(('D16621', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.43432378, 0.27245619])})\n",
            "(('16664', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16664', 'pos': array([0.23777463, 0.46655964])})\n",
            "(('D13441', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22144484, 0.24043131])})\n",
            "(('23089', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23089', 'pos': array([0.24585046, 0.21521402])})\n",
            "(('D29774', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.3887461 , 0.36037144])})\n",
            "(('2539', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '2539', 'pos': array([0.26982941, 0.24453344])})\n",
            "(('25042', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '25042', 'pos': array([0.34252132, 0.24451573])})\n",
            "(('D11862', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25429798, 0.41409642])})\n",
            "(('8701', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8701', 'pos': array([0.24604884, 0.33639558])})\n",
            "(('A00011', 'A_level_item'), {'type': 'A_level_item', 'pos': array([nan, nan])})\n",
            "(('D02396', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.11212923, 0.22191354])})\n",
            "(('3644', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '3644', 'pos': array([0.38375794, 0.20466028])})\n",
            "(('8753', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8753', 'pos': array([0.01462359, 0.28378576])})\n",
            "(('D12902', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.20584088, 0.24026517])})\n",
            "(('8759', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '8759', 'pos': array([0.2664109, 0.2737514])})\n",
            "(('8799', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8799', 'pos': array([0.35343125, 0.28704514])})\n",
            "(('D29015', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.2092628 , 0.21112077])})\n",
            "(('25216', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '25216', 'pos': array([0.24629709, 0.36429659])})\n",
            "(('675', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '675', 'pos': array([0.26876433, 0.25775444])})\n",
            "(('D01120', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25418349, 0.01321298])})\n",
            "(('8867', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '8867', 'pos': array([0.36409303, 0.06219464])})\n",
            "(('D13019', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.29440817, 0.24122036])})\n",
            "(('686', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '686', 'pos': array([0.32763945, 0.11716983])})\n",
            "(('D13744', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.33602896, 0.17449112])})\n",
            "(('17080', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17080', 'pos': array([0.16797811, 0.15822335])})\n",
            "(('D34003', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.40736787, 0.24044438])})\n",
            "(('8908', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '8908', 'pos': array([0.11108857, 0.08257294])})\n",
            "(('25294', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '25294', 'pos': array([0.29571392, 0.47759095])})\n",
            "(('D25484', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.33195608, 0.29562566])})\n",
            "(('17104', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17104', 'pos': array([0.25550497, 0.27703639])})\n",
            "(('D20276', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.02138523, 0.32019034])})\n",
            "(('767', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '767', 'pos': array([0.07784423, 0.12495435])})\n",
            "(('D07812', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.34934944, 0.02677313])})\n",
            "(('25354', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '25354', 'pos': array([0.19504501, 0.16802707])})\n",
            "(('D17306', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.16872822, 0.39223565])})\n",
            "(('25372', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '25372', 'pos': array([0.42458075, 0.20463007])})\n",
            "(('D31646', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.24626215, 0.24043344])})\n",
            "(('D35568', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.30036996, 0.18105794])})\n",
            "(('D34290', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22776678, 0.28233858])})\n",
            "(('22689', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '22689', 'pos': array([0.40948238, 0.09921021])})\n",
            "(('823', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '823', 'pos': array([0.24585097, 0.23689836])})\n",
            "(('848', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '848', 'pos': array([0.32278301, 0.32588311])})\n",
            "(('D05074', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.11963457, 0.38556385])})\n",
            "(('25447', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '25447', 'pos': array([0.338367  , 0.41134025])})\n",
            "(('C00113', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.10098497, 0.21778718])})\n",
            "(('17332', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17332', 'pos': array([0.21281627, 0.42286458])})\n",
            "(('D34569', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.21858192, 0.15523916])})\n",
            "(('14913', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '14913', 'pos': array([0.37135279, 0.14161148])})\n",
            "(('17356', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '17356', 'pos': array([0.12709255, 0.32969567])})\n",
            "(('D01030', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.21440068, 0.3374311 ])})\n",
            "(('D20193', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.40861634, 0.33091953])})\n",
            "(('22932', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '22932', 'pos': array([0.24576302, 0.18975809])})\n",
            "(('17416', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17416', 'pos': array([0.3744269, 0.3625745])})\n",
            "(('D01152', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25392382, 0.5       ])})\n",
            "(('9233', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9233', 'pos': array([0.28617776, 0.30462826])})\n",
            "(('D14305', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.10869596, 0.18889581])})\n",
            "(('9241', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9241', 'pos': array([0.24287198, 0.24363116])})\n",
            "(('C00138', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.        , 0.37003498])})\n",
            "(('9246', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9246', 'pos': array([0.32674522, 0.16708482])})\n",
            "(('D14365', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.30906985, 0.37387909])})\n",
            "(('D16589', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25429524, 0.15659476])})\n",
            "(('9653', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9653', 'pos': array([0.25894418, 0.24617125])})\n",
            "(('9284', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9284', 'pos': array([0.25941621, 0.21294188])})\n",
            "(('D25734', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.26586842, 0.26332714])})\n",
            "(('17487', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17487', 'pos': array([0.29983558, 0.09346755])})\n",
            "(('9316', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9316', 'pos': array([0.22941405, 0.26219762])})\n",
            "(('9370', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9370', 'pos': array([0.21426631, 0.18737184])})\n",
            "(('C00054', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.25939512, 0.5       ])})\n",
            "(('1180', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '1180', 'pos': array([0.10674623, 0.287103  ])})\n",
            "(('D16559', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.10005009, 0.25043959])})\n",
            "(('17632', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17632', 'pos': array([0.02977727, 0.13165807])})\n",
            "(('D05303', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.07757928, 0.2009235 ])})\n",
            "(('B00072', 'B_level_item'), {'type': 'B_level_item', 'pos': array([0. , 0.5])})\n",
            "(('9453', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9453', 'pos': array([0.1192249 , 0.39264916])})\n",
            "(('17666', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '17666', 'pos': array([0.24478147, 0.20571913])})\n",
            "(('D00064', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.05094887, 0.15979415])})\n",
            "(('19806', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19806', 'pos': array([0.2458489 , 0.29275531])})\n",
            "(('25903', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '25903', 'pos': array([0.17033101, 0.32980105])})\n",
            "(('D18127', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.        , 0.26419516])})\n",
            "(('D02908', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.48809686, 0.14663297])})\n",
            "(('27719', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27719', 'pos': array([0.30518996, 0.1634033 ])})\n",
            "(('D29979', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.23800797, 0.19668225])})\n",
            "(('26337', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '26337', 'pos': array([0.2444283 , 0.27983016])})\n",
            "(('D14748', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.01976488, 0.05829173])})\n",
            "(('19470', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19470', 'pos': array([0.15693055, 0.09016387])})\n",
            "(('1515', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '1515', 'pos': array([0.18529059, 0.        ])})\n",
            "(('D00509', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.3440462 , 0.34537758])})\n",
            "(('9719', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9719', 'pos': array([0.        , 0.24323267])})\n",
            "(('D00308', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.17458789, 0.2399754 ])})\n",
            "(('18581', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '18581', 'pos': array([0.26195675, 0.23135407])})\n",
            "(('9827', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9827', 'pos': array([0.06835709, 0.24323099])})\n",
            "(('D02470', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25429792, 0.2106127 ])})\n",
            "(('D12634', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22008545, 0.4469826 ])})\n",
            "(('23816', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23816', 'pos': array([0.02491871, 0.33331335])})\n",
            "(('9866', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '9866', 'pos': array([0.33573713, 0.37256657])})\n",
            "(('26283', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '26283', 'pos': array([0.39774849, 0.38840439])})\n",
            "(('D19500', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.17638205, 0.14094041])})\n",
            "(('18796', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '18796', 'pos': array([0.28161499, 0.41500978])})\n",
            "(('1739', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '1739', 'pos': array([0.27247915, 0.33666526])})\n",
            "(('D29948', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25430011, 0.12304898])})\n",
            "(('D29963', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.28051289, 0.23813883])})\n",
            "(('1775', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '1775', 'pos': array([0.20729067, 0.07266235])})\n",
            "(('D12319', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.34603479, 0.2206981 ])})\n",
            "(('9987', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '9987', 'pos': array([0.05414761, 0.38347982])})\n",
            "(('D07360', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.36884462, 0.24676067])})\n",
            "(('D05440', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.27818024, 0.20992861])})\n",
            "(('22317', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '22317', 'pos': array([0.22814925, 0.10960905])})\n",
            "(('18186', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '18186', 'pos': array([0.40738745, 0.45094581])})\n",
            "(('10023', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10023', 'pos': array([0.28732886, 0.22274848])})\n",
            "(('18228', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '18228', 'pos': array([0.26497974, 0.08896122])})\n",
            "(('10076', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10076', 'pos': array([0.16989316, 0.20171568])})\n",
            "(('18280', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '18280', 'pos': array([0.26974663, 0.20456611])})\n",
            "(('10088', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '10088', 'pos': array([0.09923785, 0.10684856])})\n",
            "(('D16573', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.07642782, 0.27639045])})\n",
            "(('D26612', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.18366439, 0.09757413])})\n",
            "(('11535', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11535', 'pos': array([0.24590323, 0.22816012])})\n",
            "(('D28582', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25429806, 0.3492708 ])})\n",
            "(('12974', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '12974', 'pos': array([0.262384, 0.5     ])})\n",
            "(('10199', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10199', 'pos': array([0.3236135, 0.2879179])})\n",
            "(('D08650', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.18736327, 0.42280103])})\n",
            "(('7013', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '7013', 'pos': array([0.16758452, 0.2668197 ])})\n",
            "(('26634', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '26634', 'pos': array([0.11478002, 0.0407129 ])})\n",
            "(('D25325', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.3508167 , 0.39327663])})\n",
            "(('10260', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10260', 'pos': array([0.3982753 , 0.32309328])})\n",
            "(('D16002', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.24466403, 0.25749459])})\n",
            "(('D17702', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.18425596, 0.27387693])})\n",
            "(('24000', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '24000', 'pos': array([0.44772833, 0.2859937 ])})\n",
            "(('3087', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3087', 'pos': array([0.30190052, 0.12219263])})\n",
            "(('5848', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5848', 'pos': array([0.23461063, 0.22001252])})\n",
            "(('2165', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '2165', 'pos': array([0.24585676, 0.1448461 ])})\n",
            "(('D06578', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.28686896, 0.2782841 ])})\n",
            "(('2169', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '2169', 'pos': array([0.28166853, 0.27467537])})\n",
            "(('D06447', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25430129, 0.18231447])})\n",
            "(('26790', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '26790', 'pos': array([0.37164368, 0.22364127])})\n",
            "(('D19890', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.29614676, 0.21366879])})\n",
            "(('18703', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '18703', 'pos': array([0.37337492, 0.25481996])})\n",
            "(('D02895', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.45869498, 0.41223848])})\n",
            "(('D35650', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.26301981, 0.38516098])})\n",
            "(('28880', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28880', 'pos': array([0.09302849, 0.1891444 ])})\n",
            "(('10548', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10548', 'pos': array([0.2273725, 0.1643819])})\n",
            "(('26934', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '26934', 'pos': array([0.39466385, 0.34406521])})\n",
            "(('D11126', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.16292036, 0.2750193 ])})\n",
            "(('10554', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10554', 'pos': array([0.38945501, 0.2419706 ])})\n",
            "(('2368', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '2368', 'pos': array([0.32623986, 0.22653532])})\n",
            "(('10561', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10561', 'pos': array([0.43885852, 0.11568846])})\n",
            "(('18760', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '18760', 'pos': array([0.32592126, 0.45155386])})\n",
            "(('10613', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10613', 'pos': array([0.09169565, 0.24450016])})\n",
            "(('10671', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10671', 'pos': array([0.22347152, 0.14430518])})\n",
            "(('D19482', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.14925904, 0.09353471])})\n",
            "(('2499', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '2499', 'pos': array([0.17728595, 0.21408139])})\n",
            "(('D01508', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22065512, 0.38334447])})\n",
            "(('D10503', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.4092175, 0.2908312])})\n",
            "(('7589', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '7589', 'pos': array([0.33367546, 0.33598726])})\n",
            "(('2533', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '2533', 'pos': array([0.19372119, 0.27973185])})\n",
            "(('D05692', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.28225133, 0.33221242])})\n",
            "(('D04255', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.33679887, 0.08726994])})\n",
            "(('6926', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '6926', 'pos': array([0.21315245, 0.24274076])})\n",
            "(('18950', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '18950', 'pos': array([0.26230844, 0.16329004])})\n",
            "(('D21119', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.35632091, 0.14229022])})\n",
            "(('10812', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '10812', 'pos': array([0.18989881, 0.39276939])})\n",
            "(('21091', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '21091', 'pos': array([0.20113582, 0.24450946])})\n",
            "(('C00418', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.24587118, 0.25013445])})\n",
            "(('12980', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '12980', 'pos': array([0.48097862, 0.29666359])})\n",
            "(('D30187', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.43007625, 0.14159214])})\n",
            "(('29221', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '29221', 'pos': array([0.14575953, 0.11098531])})\n",
            "(('D07251', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.3626398 , 0.16688472])})\n",
            "(('23740', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23740', 'pos': array([0.2448566 , 0.05472597])})\n",
            "(('7448', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '7448', 'pos': array([0.03554041, 0.22221377])})\n",
            "(('19082', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19082', 'pos': array([0.31884467, 0.19503916])})\n",
            "(('D21826', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.28368524, 0.31126329])})\n",
            "(('27316', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27316', 'pos': array([0.2792907 , 0.21368227])})\n",
            "(('27370', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27370', 'pos': array([0.16317937, 0.29019495])})\n",
            "(('11006', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11006', 'pos': array([0.2460065 , 0.39395524])})\n",
            "(('D18788', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.15783185, 0.33076191])})\n",
            "(('D03816', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.0721358 , 0.24043167])})\n",
            "(('19603', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '19603', 'pos': array([0.10928619, 0.30865392])})\n",
            "(('27423', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27423', 'pos': array([0.28561845, 0.19518855])})\n",
            "(('D13673', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.05400418, 0.39292808])})\n",
            "(('D08986', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.17402732, 0.30816843])})\n",
            "(('2951', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '2951', 'pos': array([0.37362603, 0.11327011])})\n",
            "(('11093', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11093', 'pos': array([0.3618705 , 0.46415446])})\n",
            "(('D25172', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.09623481, 0.08537073])})\n",
            "(('27496', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27496', 'pos': array([0.16789821, 0.23282486])})\n",
            "(('27495', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27495', 'pos': array([0.30218975, 0.32992918])})\n",
            "(('D05655', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.293786  , 0.12468188])})\n",
            "(('11137', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11137', 'pos': array([0.24586635, 0.24999894])})\n",
            "(('D21354', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.35414692, 0.31660968])})\n",
            "(('27535', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27535', 'pos': array([0.0990818 , 0.38704809])})\n",
            "(('11151', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11151', 'pos': array([0.2363472 , 0.23214591])})\n",
            "(('11194', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '11194', 'pos': array([0.32607295, 0.14836831])})\n",
            "(('C00273', 'C_level_item'), {'type': 'C_level_item', 'pos': array([0.5      , 0.0321366])})\n",
            "(('D02670', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25430145, 0.29882771])})\n",
            "(('11294', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '11294', 'pos': array([0.0376638 , 0.19653094])})\n",
            "(('D20870', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.31181008, 0.24086584])})\n",
            "(('D19225', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.14586138, 0.45624903])})\n",
            "(('11296', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '11296', 'pos': array([0.15984855, 0.24453063])})\n",
            "(('3110', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3110', 'pos': array([0.22720966, 0.3291952 ])})\n",
            "(('D01807', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.13995652, 0.15526091])})\n",
            "(('3129', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '3129', 'pos': array([0.12730699, 0.23272828])})\n",
            "(('D29020', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.43716031, 0.19564678])})\n",
            "(('28103', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28103', 'pos': array([0.2983156 , 0.04813063])})\n",
            "(('D06931', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.21622901, 0.10634369])})\n",
            "(('5960', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '5960', 'pos': array([0.3857817 , 0.16225556])})\n",
            "(('3247', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3247', 'pos': array([0.41118949, 0.29713681])})\n",
            "(('3260', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '3260', 'pos': array([0.2778986 , 0.10678833])})\n",
            "(('19702', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '19702', 'pos': array([0.05169694, 0.16328498])})\n",
            "(('22104', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '22104', 'pos': array([0.20693856, 0.09768899])})\n",
            "(('19687', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19687', 'pos': array([0.18490437, 0.24451473])})\n",
            "(('D15209', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.280062  , 0.19527238])})\n",
            "(('D04717', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.28772166, 0.15905435])})\n",
            "(('19987', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19987', 'pos': array([0.36361456, 0.32949478])})\n",
            "(('11563', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11563', 'pos': array([0.36984379, 0.3929868 ])})\n",
            "(('D28464', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.43613754, 0.04469772])})\n",
            "(('3393', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3393', 'pos': array([0.3203949 , 0.25926293])})\n",
            "(('27987', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '27987', 'pos': array([0.27470038, 0.23330839])})\n",
            "(('D01252', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.36182359, 0.27808214])})\n",
            "(('19817', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19817', 'pos': array([0.16858228, 0.12406331])})\n",
            "(('D21744', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.21198794, 0.27100577])})\n",
            "(('7960', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '7960', 'pos': array([0.28023626, 0.35911596])})\n",
            "(('3500', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3500', 'pos': array([0.30991543, 0.21630851])})\n",
            "(('28077', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28077', 'pos': array([0.17081049, 0.3613965 ])})\n",
            "(('D22725', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.02149225, 0.12702768])})\n",
            "(('12615', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '12615', 'pos': array([0.21090861, 0.26663367])})\n",
            "(('19892', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '19892', 'pos': array([0.33033723, 0.20622903])})\n",
            "(('D26502', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25464288, 0.2405513 ])})\n",
            "(('28598', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28598', 'pos': array([0.44005647, 0.33075051])})\n",
            "(('11733', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11733', 'pos': array([0.27339044, 0.05837833])})\n",
            "(('D01200', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.16915889, 0.3582462 ])})\n",
            "(('16324', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '16324', 'pos': array([0.314932  , 0.37581519])})\n",
            "(('28129', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28129', 'pos': array([0.15384965, 0.21144844])})\n",
            "(('D24541', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25429243, 0.09074563])})\n",
            "(('3610', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3610', 'pos': array([0.08734947, 0.2099899 ])})\n",
            "(('D20207', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.44864601, 0.24043172])})\n",
            "(('11875', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11875', 'pos': array([0.24978969, 0.24451004])})\n",
            "(('D02390', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.14804434, 0.        ])})\n",
            "(('16161', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '16161', 'pos': array([0.2132844 , 0.31976472])})\n",
            "(('3723', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3723', 'pos': array([0.20104075, 0.21363006])})\n",
            "(('28311', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '28311', 'pos': array([0.24512465, 0.26399488])})\n",
            "(('3735', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3735', 'pos': array([0.45058733, 0.16170251])})\n",
            "(('3746', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '3746', 'pos': array([0.28155469, 0.32693149])})\n",
            "(('20142', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '20142', 'pos': array([0.26034369, 0.30796005])})\n",
            "(('11974', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '11974', 'pos': array([0.3254527 , 0.27400559])})\n",
            "(('3836', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '3836', 'pos': array([0.4015779 , 0.26697986])})\n",
            "(('D10791', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.15894556, 0.19857706])})\n",
            "(('20334', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '20334', 'pos': array([0.32796626, 0.09067678])})\n",
            "(('D12877', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.15716145, 0.24040585])})\n",
            "(('D26519', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.23522924, 0.32209057])})\n",
            "(('D15639', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.2386399 , 0.22766366])})\n",
            "(('29816', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '29816', 'pos': array([0.29413072, 0.24450938])})\n",
            "(('D04798', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.40409193, 0.20401225])})\n",
            "(('5259', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5259', 'pos': array([0.08754701, 0.1624973 ])})\n",
            "(('28728', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28728', 'pos': array([0.28757304, 0.00711587])})\n",
            "(('4152', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '4152', 'pos': array([0.24585132, 0.01344507])})\n",
            "(('D27160', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.25457748, 0.24718445])})\n",
            "(('4185', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '4185', 'pos': array([0.21389962, 0.20596198])})\n",
            "(('28765', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28765', 'pos': array([0.35912133, 0.01621789])})\n",
            "(('28766', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '28766', 'pos': array([0.15707602, 0.41283678])})\n",
            "(('12481', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '12481', 'pos': array([0.31938267, 0.24447942])})\n",
            "(('4314', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '4314', 'pos': array([0.27057234, 0.45088654])})\n",
            "(('D24092', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.33226686, 0.20509831])})\n",
            "(('4363', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '4363', 'pos': array([0.21408569, 0.22847101])})\n",
            "(('D02624', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22244239, 0.25779367])})\n",
            "(('20817', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '20817', 'pos': array([0.31356547, 0.40621007])})\n",
            "(('D15774', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.49764945, 0.19928046])})\n",
            "(('20895', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '20895', 'pos': array([0.18379967, 0.41507532])})\n",
            "(('D06106', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.41550437, 0.1013461 ])})\n",
            "(('12729', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '12729', 'pos': array([0.15669548, 0.3845253 ])})\n",
            "(('D22137', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.06707096, 0.33237421])})\n",
            "(('20930', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '20930', 'pos': array([0.20297734, 0.13211625])})\n",
            "(('D06630', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.34327055, 0.24518241])})\n",
            "(('D14475', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.32106287, 0.27002117])})\n",
            "(('D30760', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.39586997, 0.38774596])})\n",
            "(('29307', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '29307', 'pos': array([0.15336987, 0.17779131])})\n",
            "(('29327', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '29327', 'pos': array([0.17251706, 0.17840971])})\n",
            "(('D30848', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.18268129, 0.20199925])})\n",
            "(('29357', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '29357', 'pos': array([0.2354371 , 0.24449321])})\n",
            "(('4852', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '4852', 'pos': array([0.13631567, 0.29043551])})\n",
            "(('21276', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '21276', 'pos': array([0.15904578, 0.05432117])})\n",
            "(('4962', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '4962', 'pos': array([0.24585173, 0.41612837])})\n",
            "(('5066', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5066', 'pos': array([0.21109607, 0.16384413])})\n",
            "(('D25861', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.38164629, 0.10093026])})\n",
            "(('D16403', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22001839, 0.05804187])})\n",
            "(('5483', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5483', 'pos': array([0.28014945, 0.24748048])})\n",
            "(('21628', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '21628', 'pos': array([0.27706751, 0.28897319])})\n",
            "(('5291', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5291', 'pos': array([0.35465449, 0.16330697])})\n",
            "(('5300', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5300', 'pos': array([0.20325736, 0.33832646])})\n",
            "(('5319', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5319', 'pos': array([0.15621659, 0.32749344])})\n",
            "(('13519', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '13519', 'pos': array([0.27501022, 0.177325  ])})\n",
            "(('D32926', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.30500004, 0.3998949 ])})\n",
            "(('5341', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5341', 'pos': array([0.24543133, 0.09367596])})\n",
            "(('5355', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '5355', 'pos': array([0.29897121, 0.27578188])})\n",
            "(('13668', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '13668', 'pos': array([0.3275074 , 0.04420127])})\n",
            "(('13684', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '13684', 'pos': array([0.35367793, 0.19301189])})\n",
            "(('D33797', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.47715599, 0.3122356 ])})\n",
            "(('14476', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '14476', 'pos': array([0.40948018, 0.15802599])})\n",
            "(('5847', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '5847', 'pos': array([0.45048852, 0.3771162 ])})\n",
            "(('6006', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '6006', 'pos': array([0.21299186, 0.01550865])})\n",
            "(('14240', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '14240', 'pos': array([0.36367718, 0.09575387])})\n",
            "(('22512', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '22512', 'pos': array([0.33038168, 0.30645123])})\n",
            "(('D18293', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.26457711, 0.24042936])})\n",
            "(('23276', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23276', 'pos': array([0.42154157, 0.24165919])})\n",
            "(('6211', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '6211', 'pos': array([0.20008773, 0.46447762])})\n",
            "(('22757', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '22757', 'pos': array([0.47647532, 0.19440923])})\n",
            "(('D10783', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.2547712 , 0.22913714])})\n",
            "(('15754', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15754', 'pos': array([0.28484453, 0.16238773])})\n",
            "(('15394', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15394', 'pos': array([0.11614412, 0.20835732])})\n",
            "(('14691', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '14691', 'pos': array([0.24588731, 0.24341204])})\n",
            "(('14830', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '14830', 'pos': array([0.13825878, 0.15556791])})\n",
            "(('23032', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23032', 'pos': array([0.22343519, 0.21512566])})\n",
            "(('6871', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '6871', 'pos': array([0.5       , 0.24648123])})\n",
            "(('23585', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23585', 'pos': array([0.06012591, 0.27379121])})\n",
            "(('D15125', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.22804181, 0.21111386])})\n",
            "(('23603', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '23603', 'pos': array([0.39845275, 0.18882657])})\n",
            "(('D12066', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.298838  , 0.45759602])})\n",
            "(('15706', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15706', 'pos': array([0.22695469, 0.24100059])})\n",
            "(('15773', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15773', 'pos': array([0.05260639, 0.30135017])})\n",
            "(('15949', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15949', 'pos': array([0.38239233, 0.28871591])})\n",
            "(('24173', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '24173', 'pos': array([0.21590332, 0.29670258])})\n",
            "(('7895', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '7895', 'pos': array([0.17781304, 0.0435858 ])})\n",
            "(('24383', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '24383', 'pos': array([0.09900968, 0.47456153])})\n",
            "(('15822', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '15822', 'pos': array([0.22011692, 0.25073748])})\n",
            "(('D02542', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.35126774, 0.44686319])})\n",
            "(('24188', 'purchase'), {'type': 'purchase', 'labels': [f, e, m, a, l], 'name': '24188', 'pos': array([0.10872288, 0.26070599])})\n",
            "(('D32961', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.00669628, 0.20803027])})\n",
            "(('D27713', 'D_level_item'), {'type': 'D_level_item', 'pos': array([0.21087378, 0.31074982])})\n",
            "(('8031', 'purchase'), {'type': 'purchase', 'labels': [m, a, l, e], 'name': '8031', 'pos': array([0.24584699, 0.3180532 ])})\n",
            "-------------------- \n",
            " [] \n",
            " --------------------\n",
            "-------------------- \n",
            " [] \n",
            " --------------------\n",
            "-------------------- \n",
            " [] \n",
            " --------------------\n",
            "-------------------- \n",
            " {} \n",
            " --------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#from py3plex.algorithms import *\n",
        "\n",
        "from py3plex.algorithms.network_classification import *\n",
        "from py3plex.visualization.benchmark_visualizations import *\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "## import status\n",
        "result_frames = []\n",
        "multilayer_network.basic_stats()  # check core imports\n",
        "for decomposition in multilayer_network.get_decomposition():\n",
        "\n",
        "    result_frames.append(\n",
        "        validate_label_propagation(decomposition[0],\n",
        "                                   decomposition[1],\n",
        "                                   dataset_name=\"imdb_classic\",\n",
        "                                   repetitions=5,\n",
        "                                   normalization_scheme=\"freq\"))\n",
        "\n",
        "    # results frame\n",
        "    validation_results = pd.DataFrame()\n",
        "\n",
        "# construct a single dataframe\n",
        "for x in result_frames:\n",
        "    validation_results = validation_results.append(x, ignore_index=True)\n",
        "print(validation_results)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CSOu4GTQQMky",
        "outputId": "74dbcf45-dafc-446d-8fdb-764d890d1675"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------- \n",
            " Computing core stats of the network \n",
            " --------------------\n",
            "MultiDiGraph with 367 nodes and 616 edges\n",
            "Number of unique node IDs: 367\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "No decomposition cycle provided. Candidate cycles thus used are: ['purchase_____purchased_by_____D_level_item_____purchased_____purchase', 'purchase_____purchased_by_____B_level_item_____purchased_____purchase', 'purchase_____purchased_by_____C_level_item_____purchased_____purchase', 'purchase_____purchased_by_____A_level_item_____purchased_____purchase']\n",
            "Propagation..\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
            "  self._set_arrayXarray(i, j, x)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "Train size:0.1, method freq\n",
            "Train size:0.2, method freq\n",
            "Train size:0.30000000000000004, method freq\n",
            "Train size:0.4, method freq\n",
            "Train size:0.5, method freq\n",
            "Train size:0.6, method freq\n",
            "Train size:0.7000000000000001, method freq\n",
            "Train size:0.8, method freq\n",
            "Train size:0.9, method freq\n",
            "     index  percent_train   micro_F   macro_F  setting       dataset      time\n",
            "0        0            0.9  0.999065  0.998910  LP_freq  imdb_classic  0.004485\n",
            "1        1            0.8  0.999533  0.999485  LP_freq  imdb_classic  0.004500\n",
            "2        2            0.7  0.997557  0.997390  LP_freq  imdb_classic  0.005336\n",
            "3        3            0.6  0.997679  0.997490  LP_freq  imdb_classic  0.005609\n",
            "4        4            0.5  0.997427  0.997250  LP_freq  imdb_classic  0.005870\n",
            "..     ...            ...       ...       ...      ...           ...       ...\n",
            "355     40            0.5  0.997427  0.997250  LP_freq  imdb_classic  0.005514\n",
            "356     41            0.4  0.998150  0.998011  LP_freq  imdb_classic  0.005065\n",
            "357     42            0.3  0.997105  0.996896  LP_freq  imdb_classic  0.005032\n",
            "358     43            0.2  0.995720  0.995404  LP_freq  imdb_classic  0.006012\n",
            "359     44            0.1  0.996206  0.995924  LP_freq  imdb_classic  0.005212\n",
            "\n",
            "[360 rows x 7 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# quick summary\n",
        "print(multilayer_network.summary())\n",
        "\n",
        "stats_frame = core_network_statistics(multilayer_network.core_network)\n",
        "print(stats_frame)\n",
        "\n",
        "top_n_by_degree = identify_n_hubs(multilayer_network.core_network, 20)\n",
        "print(top_n_by_degree)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 331
        },
        "id": "g_YVERbUQ4mE",
        "outputId": "f40f766d-a53f-429d-859f-27d57f22267f"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Number of layers': 5, 'Nodes': 367, 'Edges': 616, 'Mean degree': 3.3569482288828336, 'CC': 117}\n",
            "      Name classes nodes edges    degree     diameter connected components  \\\n",
            "0  example    None   367   616  3.356948  intractable                 None   \n",
            "\n",
            "  clustering coefficient   density  flow_hierarchy  flow hierarchy  \n",
            "0                   None  0.004586             NaN             0.0  \n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-32-f0506c13d6e9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstats_frame\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mtop_n_by_degree\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0midentify_n_hubs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmultilayer_network\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore_network\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtop_n_by_degree\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'identify_n_hubs' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# An example how nx functions can be used.\n",
        "\n",
        "\n",
        "# compute node centralities --- this will be applied to the network object\n",
        "centralities = multilayer_network.monoplex_nx_wrapper(\"degree_centrality\")\n",
        "\n",
        "# get top nodes by centrality\n",
        "print(sorted(centralities.items(), key=lambda x: x[1], reverse=True)[:5])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yhHLshEPRJea",
        "outputId": "368abee5-48e9-4bc7-bf14-563964b563c7"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(('C00003', 'C_level_item'), 0.644808743169399), (('C00053', 'C_level_item'), 0.08196721311475409), (('A00011', 'A_level_item'), 0.07103825136612021), (('4185', 'purchase'), 0.060109289617486336), (('C00113', 'C_level_item'), 0.04371584699453552)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# tensor-based operations examples\n",
        "\n",
        "from py3plex.core import random_generators\n",
        "\n",
        "# initiate an instance of a random graph\n",
        "ER_multilayer = random_generators.random_multilayer_ER(500,\n",
        "                                                       8,\n",
        "                                                       0.05,\n",
        "                                                       directed=False)\n",
        "\n",
        "# some simple visualization\n",
        "visualization_params = {\"display\": True}\n",
        "ER_multilayer.visualize_matrix(visualization_params)\n",
        "\n",
        "some_nodes = [node for node in ER_multilayer.get_nodes()][0:5]\n",
        "some_edges = [node for node in ER_multilayer.get_edges()][0:5]\n",
        "\n",
        "# random node is accessed as follows\n",
        "print(ER_multilayer[some_nodes[0]])\n",
        "\n",
        "# and random edge as\n",
        "print(ER_multilayer[some_edges[0][0]][some_edges[0][1]])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        },
        "id": "AEqixsoaSCpp",
        "outputId": "a1f2380e-0a1f-449e-a4cc-3b4f0146429b"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{(3, 4): {0: {'type': 'default'}}, (5, 4): {0: {'type': 'default'}}, (12, 1): {0: {'type': 'default'}}, (27, 4): {0: {'type': 'default'}}, (66, 5): {0: {'type': 'default'}}, (70, 4): {0: {'type': 'default'}}, (132, 1): {0: {'type': 'default'}}, (142, 7): {0: {'type': 'default'}}, (161, 7): {0: {'type': 'default'}}, (186, 3): {0: {'type': 'default'}}, (192, 2): {0: {'type': 'default'}}, (203, 5): {0: {'type': 'default'}}, (240, 7): {0: {'type': 'default'}}, (264, 1): {0: {'type': 'default'}}, (279, 2): {0: {'type': 'default'}}, (287, 2): {0: {'type': 'default'}}, (301, 2): {0: {'type': 'default'}}, (321, 7): {0: {'type': 'default'}}, (342, 5): {0: {'type': 'default'}}, (356, 7): {0: {'type': 'default'}}, (359, 0): {0: {'type': 'default'}}, (383, 5): {0: {'type': 'default'}}, (384, 1): {0: {'type': 'default'}}, (395, 2): {0: {'type': 'default'}}, (398, 1): {0: {'type': 'default'}}, (481, 7): {0: {'type': 'default'}}, (492, 0): {0: {'type': 'default'}}}\n",
            "{0: {'type': 'default'}}\n"
          ]
        }
      ]
    }
  ]
}